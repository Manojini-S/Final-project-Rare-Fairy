{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js\",\n  _s = $RefreshSig$();\n// import './userdetails.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [clickedRowIndex, setClickedRowIndex] = useState(null);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n//     const handleDeleteClick = (UserId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${UserId}`, {\n//             method: 'DELETE'\n//         })\n//         .then(response => {\n//             if (!response.ok) {\n//                 throw new Error('Failed to delete user');\n//             }\n//             // User deleted successfully, update the user list\n//             return fetchUsers();\n//         })\n//         .then(() => {\n//             // Optionally, you can display a success message or perform other actions here\n//             console.log('User deleted successfully');\n//         })\n//         .catch(error => {\n//             console.error('Error deleting user:', error);\n//             setError('An error occurred while deleting the user. Please try again later.');\n//         });\n//     };\n\n//     const handleVerifyClick = (userId) => {\n//         fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n//             method: 'PUT'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to verify user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error verifying user:', error);\n//                 setError('An error occurred while verifying the user. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user, index) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//         setClickedRowIndex(index);\n//     };\n\n//     const handleEditSave = () => {\n//         // Update user details and close edit modal\n//         const updatedUsers = [...users];\n//         const updatedUser = { ...selectedUser, Name: editedName, Email: editedEmail };\n//         updatedUsers[clickedRowIndex] = updatedUser;\n//         setUsers(updatedUsers);\n//         setIsEditModalOpen(false);\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n\n//             <>\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n\n//             </>\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         {/* <th>Verified</th> */}\n//                         <th>Delete</th>\n//                         <th>Verify</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user, index) => (\n//                         <tr key={user._UserId}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             {/* <td>{user.Verified ? 'Yes' : 'No'}</td> */}\n//                             <td>\n//                                 <button className='delete' onClick={() => handleDeleteClick(user._UserId)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 {!user.Verified && (\n//                                     <button className='verify' onClick={() => handleVerifyClick(user._UserId)}>Verify</button>\n//                                 )}\n//                             </td>\n//                             <td>\n//                                 <button className='edit' onClick={() => handleEditClick(user, index)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n// {/* \n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )} */}\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\nimport './userdetails.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTable = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [editedName, setEditedName] = useState('');\n  const [editedEmail, setEditedEmail] = useState('');\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [clickedRowIndex, setClickedRowIndex] = useState(null);\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = () => {\n    fetch('http://localhost:3003/user/getUser').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    }).then(data => setUsers(data)).catch(error => {\n      console.error('Error fetching users:', error);\n      setError('An error occurred while fetching users. Please try again later.');\n    });\n  };\n  const handleDeleteClick = userId => {\n    fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to delete user');\n      }\n      // User deleted successfully, update the user list\n      return fetchUsers();\n    }).then(() => {\n      console.log('User deleted successfully');\n    }).catch(error => {\n      console.error('Error deleting user:', error);\n      setError('An error occurred while deleting the user. Please try again later.');\n    });\n  };\n  const handleVerifyClick = userId => {\n    fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n      method: 'PUT'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to verify user');\n      }\n      fetchUsers();\n    }).catch(error => {\n      console.error('Error verifying user:', error);\n      setError('An error occurred while verifying the user. Please try again later.');\n    });\n  };\n  const handleEditClick = (user, index) => {\n    setSelectedUser(user);\n    setEditedName(user.Name);\n    setEditedEmail(user.Email);\n    setIsEditModalOpen(true);\n    setClickedRowIndex(index);\n  };\n  const handleEditSave = e => {\n    e.preventDefault();\n    const updatedUser = {\n      ...selectedUser,\n      Name: editedName,\n      Email: editedEmail\n    };\n    fetch(`http://localhost:3003/user/updateUser/${selectedUser._UserId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedUser)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update user');\n      }\n      return response.json();\n    }).then(() => {\n      fetchUsers();\n      setIsEditModalOpen(false);\n    }).catch(error => {\n      console.error('Error updating user:', error);\n      setError('An error occurred while updating the user. Please try again later.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-box\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Verify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map((user, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete\",\n              onClick: () => handleDeleteClick(user._UserId),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: !user.Verified && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"verify\",\n              onClick: () => handleVerifyClick(user._UserId),\n              children: \"Verify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit\",\n              onClick: () => handleEditClick(user, index),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this)]\n        }, user._UserId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), isEditModalOpen && selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-modal\",\n      style: {\n        top: `${(clickedRowIndex + 1) * 40}px`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: () => setIsEditModalOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSave,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedName,\n            onChange: e => setEditedName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: editedEmail,\n            onChange: e => setEditedEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 9\n  }, this);\n};\n_s(UserTable, \"jOZfILcDmsyKa2xThACWaVnQSAI=\");\n_c = UserTable;\nexport default UserTable;\nvar _c;\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserTable","_s","users","setUsers","error","setError","selectedUser","setSelectedUser","editedName","setEditedName","editedEmail","setEditedEmail","isEditModalOpen","setIsEditModalOpen","clickedRowIndex","setClickedRowIndex","fetchUsers","fetch","then","response","ok","Error","json","data","catch","console","handleDeleteClick","userId","method","log","handleVerifyClick","handleEditClick","user","index","Name","Email","handleEditSave","e","preventDefault","updatedUser","_UserId","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","Verified","style","top","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js"],"sourcesContent":["// import './userdetails.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [clickedRowIndex, setClickedRowIndex] = useState(null);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n//     const handleDeleteClick = (UserId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${UserId}`, {\n//             method: 'DELETE'\n//         })\n//         .then(response => {\n//             if (!response.ok) {\n//                 throw new Error('Failed to delete user');\n//             }\n//             // User deleted successfully, update the user list\n//             return fetchUsers();\n//         })\n//         .then(() => {\n//             // Optionally, you can display a success message or perform other actions here\n//             console.log('User deleted successfully');\n//         })\n//         .catch(error => {\n//             console.error('Error deleting user:', error);\n//             setError('An error occurred while deleting the user. Please try again later.');\n//         });\n//     };\n    \n//     const handleVerifyClick = (userId) => {\n//         fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n//             method: 'PUT'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to verify user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error verifying user:', error);\n//                 setError('An error occurred while verifying the user. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user, index) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//         setClickedRowIndex(index);\n//     };\n\n//     const handleEditSave = () => {\n//         // Update user details and close edit modal\n//         const updatedUsers = [...users];\n//         const updatedUser = { ...selectedUser, Name: editedName, Email: editedEmail };\n//         updatedUsers[clickedRowIndex] = updatedUser;\n//         setUsers(updatedUsers);\n//         setIsEditModalOpen(false);\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n\n//             <>\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n\n//             </>\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         {/* <th>Verified</th> */}\n//                         <th>Delete</th>\n//                         <th>Verify</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user, index) => (\n//                         <tr key={user._UserId}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             {/* <td>{user.Verified ? 'Yes' : 'No'}</td> */}\n//                             <td>\n//                                 <button className='delete' onClick={() => handleDeleteClick(user._UserId)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 {!user.Verified && (\n//                                     <button className='verify' onClick={() => handleVerifyClick(user._UserId)}>Verify</button>\n//                                 )}\n//                             </td>\n//                             <td>\n//                                 <button className='edit' onClick={() => handleEditClick(user, index)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n// {/* \n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )} */}\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\n\nimport './userdetails.css';\nimport React, { useState, useEffect } from 'react';\n\nconst UserTable = () => {\n    const [users, setUsers] = useState([]);\n    const [error, setError] = useState('');\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [editedName, setEditedName] = useState('');\n    const [editedEmail, setEditedEmail] = useState('');\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [clickedRowIndex, setClickedRowIndex] = useState(null);\n\n    useEffect(() => {\n        fetchUsers();\n    }, []);\n\n    const fetchUsers = () => {\n        fetch('http://localhost:3003/user/getUser')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch users');\n                }\n                return response.json();\n            })\n            .then(data => setUsers(data))\n            .catch(error => {\n                console.error('Error fetching users:', error);\n                setError('An error occurred while fetching users. Please try again later.');\n            });\n    };\n\n    const handleDeleteClick = (userId) => {\n        fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n            method: 'DELETE'\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to delete user');\n            }\n            // User deleted successfully, update the user list\n            return fetchUsers();\n        })\n        .then(() => {\n            console.log('User deleted successfully');\n        })\n        .catch(error => {\n            console.error('Error deleting user:', error);\n            setError('An error occurred while deleting the user. Please try again later.');\n        });\n    };\n\n    const handleVerifyClick = (userId) => {\n        fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n            method: 'PUT'\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to verify user');\n            }\n            fetchUsers();\n        })\n        .catch(error => {\n            console.error('Error verifying user:', error);\n            setError('An error occurred while verifying the user. Please try again later.');\n        });\n    };\n\n    const handleEditClick = (user, index) => {\n        setSelectedUser(user);\n        setEditedName(user.Name);\n        setEditedEmail(user.Email);\n        setIsEditModalOpen(true);\n        setClickedRowIndex(index);\n    };\n\n    const handleEditSave = (e) => {\n        e.preventDefault();\n\n        const updatedUser = { ...selectedUser, Name: editedName, Email: editedEmail };\n\n        fetch(`http://localhost:3003/user/updateUser/${selectedUser._UserId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedUser)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to update user');\n            }\n            return response.json();\n        })\n        .then(() => {\n            fetchUsers();\n            setIsEditModalOpen(false);\n        })\n        .catch(error => {\n            console.error('Error updating user:', error);\n            setError('An error occurred while updating the user. Please try again later.');\n        });\n    };\n\n    return (\n        <div className=\"container-box\">\n            {error && <div className=\"error\">Error: {error}</div>}\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Delete</th>\n                        <th>Verify</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {users.map((user, index) => (\n                        <tr key={user._UserId}>\n                            <td>{user.Name}</td>\n                            <td>{user.Email}</td>\n                            <td>\n                                <button className='delete' onClick={() => handleDeleteClick(user._UserId)}>Delete</button>\n                            </td>\n                            <td>\n                                {!user.Verified && (\n                                    <button className='verify' onClick={() => handleVerifyClick(user._UserId)}>Verify</button>\n                                )}\n                            </td>\n                            <td>\n                                <button className='edit' onClick={() => handleEditClick(user, index)}>Edit</button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n            {isEditModalOpen && selectedUser && (\n                <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n                        <h2>Edit User</h2>\n                        <form onSubmit={handleEditSave}>\n                            <label>Name:</label>\n                            <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} required />\n                            <label>Email:</label>\n                            <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} required />\n                            <button type=\"submit\">Save</button>\n                        </form>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default UserTable;\n\n\n\n\n\n\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}