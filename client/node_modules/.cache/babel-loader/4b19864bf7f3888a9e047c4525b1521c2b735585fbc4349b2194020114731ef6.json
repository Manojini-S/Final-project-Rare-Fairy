{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js\",\n  _s = $RefreshSig$();\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const handleDeleteClick = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user._id)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const handleDeleteClick = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             {isConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user._id)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\nimport './userdetails.css';\nimport './Admin.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTable = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [editedName, setEditedName] = useState('');\n  const [editedEmail, setEditedEmail] = useState('');\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n  const [deleteUserId, setDeleteUserId] = useState(null);\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = () => {\n    fetch('http://localhost:3003/user/getUser').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    }).then(data => setUsers(data)).catch(error => {\n      console.error('Error fetching users:', error);\n      setError('An error occurred while fetching users. Please try again later.');\n    });\n  };\n  const handleEditClick = user => {\n    setSelectedUser(user);\n    setIsConfirmationOpen(true);\n  };\n  const handleDeleteClick = userId => {\n    setDeleteUserId(userId);\n    setIsConfirmationOpen(true);\n  };\n  const handleConfirmationAction = action => {\n    if (action === 'edit') {\n      setEditedName(selectedUser.Name);\n      setEditedEmail(selectedUser.Email);\n      setIsEditModalOpen(true);\n      setIsConfirmationOpen(false);\n    } else if (action === 'delete') {\n      deleteHandler(deleteUserId);\n      setIsConfirmationOpen(false);\n    }\n  };\n  const deleteHandler = userId => {\n    fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to delete user');\n      }\n      fetchUsers();\n    }).catch(error => {\n      console.error('Error deleting user:', error);\n      setError('An error occurred while deleting the user. Please try again later.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-box\",\n    children: [isConfirmationOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: () => setIsConfirmationOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to proceed?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleConfirmationAction('edit'),\n          children: \"Yes, Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleConfirmationAction('delete'),\n          children: \"Yes, Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsConfirmationOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }, this), isEditModalOpen && selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: () => setIsEditModalOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSave,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedName,\n            onChange: e => setEditedName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: editedEmail,\n            onChange: e => setEditedEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete\",\n              onClick: () => handleDeleteClick(user._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit\",\n              onClick: () => handleEditClick(user),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 29\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 9\n  }, this);\n};\n_s(UserTable, \"bDVXTLlNti/jLnH/TnqxODmgPFk=\");\n_c = UserTable;\nexport default UserTable;\nvar _c;\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserTable","_s","users","setUsers","error","setError","selectedUser","setSelectedUser","editedName","setEditedName","editedEmail","setEditedEmail","isEditModalOpen","setIsEditModalOpen","isConfirmationOpen","setIsConfirmationOpen","deleteUserId","setDeleteUserId","fetchUsers","fetch","then","response","ok","Error","json","data","catch","console","handleEditClick","user","handleDeleteClick","userId","handleConfirmationAction","action","Name","Email","deleteHandler","method","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","handleEditSave","type","value","onChange","e","target","required","map","_id","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js"],"sourcesContent":["// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const handleDeleteClick = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user._id)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\n\n\n\n\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const handleDeleteClick = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             {isConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user._id)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\nimport './userdetails.css';\nimport './Admin.css';\nimport React, { useState, useEffect } from 'react';\n\nconst UserTable = () => {\n    const [users, setUsers] = useState([]);\n    const [error, setError] = useState('');\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [editedName, setEditedName] = useState('');\n    const [editedEmail, setEditedEmail] = useState('');\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n    const [deleteUserId, setDeleteUserId] = useState(null);\n\n    useEffect(() => {\n        fetchUsers();\n    }, []);\n\n    const fetchUsers = () => {\n        fetch('http://localhost:3003/user/getUser')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch users');\n                }\n                return response.json();\n            })\n            .then(data => setUsers(data))\n            .catch(error => {\n                console.error('Error fetching users:', error);\n                setError('An error occurred while fetching users. Please try again later.');\n            });\n    };\n\n    const handleEditClick = (user) => {\n        setSelectedUser(user);\n        setIsConfirmationOpen(true);\n    };\n\n    const handleDeleteClick = (userId) => {\n        setDeleteUserId(userId);\n        setIsConfirmationOpen(true);\n    };\n\n    const handleConfirmationAction = (action) => {\n        if (action === 'edit') {\n            setEditedName(selectedUser.Name);\n            setEditedEmail(selectedUser.Email);\n            setIsEditModalOpen(true);\n            setIsConfirmationOpen(false);\n        } else if (action === 'delete') {\n            deleteHandler(deleteUserId);\n            setIsConfirmationOpen(false);\n        }\n    };\n\n    const deleteHandler = (userId) => {\n        fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n            method: 'DELETE'\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to delete user');\n                }\n                fetchUsers();\n            })\n            .catch(error => {\n                console.error('Error deleting user:', error);\n                setError('An error occurred while deleting the user. Please try again later.');\n            });\n    };\n\n    return (\n        <div className=\"container-box\">\n            {isConfirmationOpen && (\n                <div className=\"confirmation-modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={() => setIsConfirmationOpen(false)}>&times;</span>\n                        <h2>Confirm Action</h2>\n                        <p>Are you sure you want to proceed?</p>\n                        <button onClick={() => handleConfirmationAction('edit')}>Yes, Edit</button>\n                        <button onClick={() => handleConfirmationAction('delete')}>Yes, Delete</button>\n                        <button onClick={() => setIsConfirmationOpen(false)}>Cancel</button>\n                    </div>\n                </div>\n            )}\n            {isEditModalOpen && selectedUser && (\n                <div className=\"edit-modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n                        <h2>Edit User</h2>\n                        <form onSubmit={handleEditSave}>\n                            <label>Name:</label>\n                            <input\n                                type=\"text\"\n                                value={editedName}\n                                onChange={(e) => setEditedName(e.target.value)}\n                                required\n                            />\n                            <label>Email:</label>\n                            <input\n                                type=\"email\"\n                                value={editedEmail}\n                                onChange={(e) => setEditedEmail(e.target.value)}\n                                required\n                            />\n                            <button type=\"submit\">Save</button>\n                        </form>\n                    </div>\n                </div>\n            )}\n            {error && <div className=\"error\">Error: {error}</div>}\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Delete</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {users.map((user) => (\n                        <tr key={user._id}>\n                            <td>{user.Name}</td>\n                            <td>{user.Email}</td>\n                            <td>\n                                <button className=\"delete\" onClick={() => handleDeleteClick(user._id)}>Delete</button>\n                            </td>\n                            <td>\n                                <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default UserTable;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}