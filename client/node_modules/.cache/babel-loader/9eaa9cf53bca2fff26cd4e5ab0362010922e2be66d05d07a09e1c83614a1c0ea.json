{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import emailjs from \"@emailjs/browser\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import \"./Dashboard.css\";\n// import \"./productadmin.css\";\n// import Admin from \"../Pages/Admin\";\n// import customer02 from \"../Assets/customer02.jpeg\";\n// import Modal from \"../Components/Modal\";\n// import ProductForm from \"./Addproduct\";\n\n// const AdminDashboard = () => {\n//   const [search, setSearch] = useState(\"\");\n//   const [showModal, setShowModal] = useState(false);\n//   const [usersCount, setUsersCount] = useState(0);\n//   const [ordersCount, setOrdersCount] = useState(0);\n//   const [productsCount, setProductsCount] = useState(0);\n//   const [orders, setOrders] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [selectedOrder, setSelectedOrder] = useState(null);\n//   const [showEmailForm, setShowEmailForm] = useState(false);\n//   const form = useRef();\n\n//   useEffect(() => {\n//     fetchUsersCount();\n//     fetchOrdersCount();\n//     fetchProductsCount();\n//     fetchOrders();\n//   }, []);\n\n//   const fetchUsersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/user/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setUsersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching users count:\", error);\n//     }\n//   };\n\n//   const fetchOrdersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/order/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setOrdersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching orders count:\", error);\n//     }\n//   };\n\n//   const fetchProductsCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/image/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setProductsCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching products count:\", error);\n//     }\n//   };\n\n//   const fetchOrders = () => {\n//     fetch(\"http://localhost:3003/order/orders\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching orders:\", error);\n//         setError(\"Failed to fetch orders. Please try again later.\");\n//       });\n//   };\n\n//   const handleAccept = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/:id/accept/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"accepted\" }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(orders.map((order) => (order._id === orderId ? data : order)));\n//         setSelectedOrder(data);\n//         setShowEmailForm(true);\n//         toast.success(\"Order accepted successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error accepting order:\", error);\n//         toast.error(\"Failed to accept the order.\");\n//       });\n//   };\n\n//   const handleReject = (orderId) => {\n//     // Find the order to get the email\n//     const order = orders.find(order => order._id === orderId);\n\n//     fetch(`http://localhost:3003/orders/reject/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"rejected\" }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to reject order\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setOrders(orders.filter((order) => order._id !== orderId));\n//         toast.success(\"Order rejected successfully!\");\n\n//         // Prepare and send rejection email\n//         const emailParams = {\n//           user_name: order.name,\n//           user_email: order.email,\n//           message: `Dear ${order.name}, your order has been rejected.`\n//         };\n\n//         emailjs.send(\n//           \"service_7v4vmve\",  // Your EmailJS service ID\n//           \"template_gswksyh\",  // Your EmailJS template ID\n//           emailParams,\n//           \"hpy_Ow2NKTCTlRRDq\"  // Your EmailJS user ID\n//         ).then(\n//           () => {\n//             console.log(\"Rejection email sent successfully!\");\n//           },\n//           (error) => {\n//             console.log(\"Failed to send rejection email...\", error.text);\n//           }\n//         );\n//       })\n//       .catch((error) => {\n//         console.error(\"Error rejecting order:\", error);\n//         toast.error(\"Failed to reject the order.\");\n//       });\n//   };\n\n//   const sendEmail = (e) => {\n//     e.preventDefault();\n\n//     emailjs\n//       .sendForm(\n//         \"service_7v4vmve\",\n//         \"template_gswksyh\",\n//         form.current,\n//         \"hpy_Ow2NKTCTlRRDq\"\n//       )\n//       .then(\n//         () => {\n//           console.log(\"Email sent successfully!\");\n//           setShowEmailForm(false);\n//         },\n//         (error) => {\n//           console.log(\"Failed to send email...\", error.text);\n//         }\n//       );\n//   };\n\n//   const handleSearchChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     toast.success(\"Logout successfully!\");\n//   };\n\n//   const handleShow = () => setShowModal(true);\n//   const handleClose = () => setShowModal(false);\n\n//   return (\n//     <>\n//       <div className=\"dashboard\">\n//         <div className=\"sidebar\">\n//           <div className=\"sidebar-header\">\n//             <h2>Rare Fairy</h2>\n//           </div>\n//           <ul className=\"sidebar-menu\">\n//             <li>\n//               <Link to=\"/Dashboard\">\n//                 <i className=\"fas fa-tachometer-alt\"></i> Dashboard\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/OrderList\">\n//                 <i className=\"fas fa-shopping-cart\"></i> Order\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Admin\">\n//                 <i className=\"fas fa-users\"></i> Users\n//               </Link>\n//             </li>\n//             <li>\n//               <a href=\"/product\">\n//                 <i className=\"fas fa-box-open\"></i> Product{\" \"}\n//               </a>\n//             </li>\n//             <li>\n//               <Link to=\"/payment\">\n//                 <i className=\"fas fa-credit-card\"></i> Payment\n//               </Link>\n//             </li>\n//             <li>\n//               <Link className=\"a\" to=\"/login\" onClick={handleLogout}>\n//                 <i className=\"fas fa-sign-out-alt\"></i> Logout\n//               </Link>\n//             </li>\n//           </ul>\n//         </div>\n//         <div className=\"main-content\">\n//           <div className=\"header\">\n//             <div className=\"header-left\">\n//               <h1>Welcome to Admin</h1>\n//             </div>\n//             <div className=\"header-right\">\n//               <div className=\"search-bar\">\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Search...\"\n//                   value={search}\n//                   onChange={handleSearchChange}\n//                 />\n//               </div>\n//               <div className=\"notification\">\n//                 <i className=\"fas fa-bell\"></i>\n//               </div>\n//               <div className=\"profile\">\n//                 <img src={customer02} alt=\"Profile\" />\n//                 <span>Manojini Suthakar</span>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"content\">\n//             <div className=\"card-dash\">\n//               <h3>Users</h3>\n//               <p>Number of active users: {usersCount}</p>\n//             </div>\n//             <div className=\"card-dash\">\n//               <h3>Order</h3>\n//               <p>Number of orders: {ordersCount}</p>\n//             </div>\n//             <div className=\"card-dash\">\n//               <Link to=\"/Addproduct\" onClick={handleShow}>\n//                 <h3>Add product</h3>\n//                 <p>Number of products: {productsCount}</p>\n//               </Link>\n//             </div>\n//           </div>\n//           <h1 className=\"order\">Order List</h1>\n//           {error && <p>{error}</p>}\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Name</th>\n//                 <th>Email</th>\n//                 <th>Contact Number</th>\n//                 <th>Address</th>\n//                 <th>Deadline</th>\n//                 <th>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {orders.map((order) => (\n//                 <tr key={order._id}>\n//                   <td>{order.name}</td>\n//                   <td>{order.email}</td>\n//                   <td>{order.contactNumber}</td>\n//                   <td>{order.address}</td>\n//                   <td>{new Date(order.deadline).toLocaleDateString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"accept\"\n//                       onClick={() => handleAccept(order._id)}\n//                     >\n//                       Accept\n//                     </button>\n//                     <button\n//                       className=\"reject\"\n//                       onClick={() => handleReject(order._id)}\n//                     >\n//                       Reject\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//           {showEmailForm && (\n//             <form ref={form} onSubmit={sendEmail}>\n//               <label>Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"user_name\"\n//                 defaultValue={selectedOrder ? selectedOrder.name : \"\"}\n//                 readOnly\n//               />\n//               <label>Email</label>\n//               <input\n//                 type=\"email\"\n//                 name=\"user_email\"\n//                 defaultValue={selectedOrder ? selectedOrder.email : \"\"}\n//                 readOnly\n//               />\n//               <label>Message</label>\n//               <textarea name=\"message\"></textarea>\n//               <input type=\"submit\" value=\"Send\" />\n//             </form>\n//           )}\n//         </div>\n//       </div>\n//       <Modal show={showModal} handleClose={handleClose}>\n//         <ProductForm />\n//       </Modal>\n//       <ToastContainer />\n//     </>\n//   );\n// };\n\n// export default AdminDashboard;\n\n// Correct URL paths based on your backend routes\nconst fetchUsersCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/user/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setUsersCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching users count:\", error);\n  }\n};\nconst fetchOrdersCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setOrdersCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching orders count:\", error);\n  }\n};\nconst fetchProductsCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/image/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setProductsCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching products count:\", error);\n  }\n};\nconst fetchOrders = () => {\n  fetch(\"http://localhost:3003/orders\").then(response => response.json()).then(data => {\n    setOrders(data);\n  }).catch(error => {\n    console.error(\"Error fetching orders:\", error);\n    setError(\"Failed to fetch orders. Please try again later.\");\n  });\n};\nconst handleAccept = orderId => {\n  fetch(`http://localhost:3003/orders/${orderId}/accept`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      status: \"accepted\"\n    })\n  }).then(response => response.json()).then(data => {\n    setOrders(orders.map(order => order._id === orderId ? data : order));\n    setSelectedOrder(data);\n    setShowEmailForm(true);\n    toast.success(\"Order accepted successfully!\");\n  }).catch(error => {\n    console.error(\"Error accepting order:\", error);\n    toast.error(\"Failed to accept the order.\");\n  });\n};\nconst handleReject = orderId => {\n  // Find the order to get the email\n  const order = orders.find(order => order._id === orderId);\n  fetch(`http://localhost:3003/orders/${orderId}/reject`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      status: \"rejected\"\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Failed to reject order\");\n    }\n    return response.json();\n  }).then(data => {\n    setOrders(orders.filter(order => order._id !== orderId));\n    toast.success(\"Order rejected successfully!\");\n\n    // Prepare and send rejection email\n    const emailParams = {\n      user_name: order.name,\n      user_email: order.email,\n      message: `Dear ${order.name}, your order has been rejected.`\n    };\n    emailjs.send(\"service_7v4vmve\",\n    // Your EmailJS service ID\n    \"template_gswksyh\",\n    // Your EmailJS template ID\n    emailParams, \"hpy_Ow2NKTCTlRRDq\" // Your EmailJS user ID\n    ).then(() => {\n      console.log(\"Rejection email sent successfully!\");\n    }, error => {\n      console.log(\"Failed to send rejection email...\", error.text);\n    });\n  }).catch(error => {\n    console.error(\"Error rejecting order:\", error);\n    toast.error(\"Failed to reject the order.\");\n  });\n};","map":{"version":3,"names":["fetchUsersCount","response","fetch","ok","Error","data","json","setUsersCount","count","error","console","fetchOrdersCount","setOrdersCount","fetchProductsCount","setProductsCount","fetchOrders","then","setOrders","catch","setError","handleAccept","orderId","method","headers","body","JSON","stringify","status","orders","map","order","_id","setSelectedOrder","setShowEmailForm","toast","success","handleReject","find","filter","emailParams","user_name","name","user_email","email","message","emailjs","send","log","text"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/OrderDashboard.js"],"sourcesContent":["\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import emailjs from \"@emailjs/browser\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import \"./Dashboard.css\";\n// import \"./productadmin.css\";\n// import Admin from \"../Pages/Admin\";\n// import customer02 from \"../Assets/customer02.jpeg\";\n// import Modal from \"../Components/Modal\";\n// import ProductForm from \"./Addproduct\";\n\n// const AdminDashboard = () => {\n//   const [search, setSearch] = useState(\"\");\n//   const [showModal, setShowModal] = useState(false);\n//   const [usersCount, setUsersCount] = useState(0);\n//   const [ordersCount, setOrdersCount] = useState(0);\n//   const [productsCount, setProductsCount] = useState(0);\n//   const [orders, setOrders] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [selectedOrder, setSelectedOrder] = useState(null);\n//   const [showEmailForm, setShowEmailForm] = useState(false);\n//   const form = useRef();\n\n//   useEffect(() => {\n//     fetchUsersCount();\n//     fetchOrdersCount();\n//     fetchProductsCount();\n//     fetchOrders();\n//   }, []);\n\n//   const fetchUsersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/user/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setUsersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching users count:\", error);\n//     }\n//   };\n\n//   const fetchOrdersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/order/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setOrdersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching orders count:\", error);\n//     }\n//   };\n\n//   const fetchProductsCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/image/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setProductsCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching products count:\", error);\n//     }\n//   };\n\n//   const fetchOrders = () => {\n//     fetch(\"http://localhost:3003/order/orders\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching orders:\", error);\n//         setError(\"Failed to fetch orders. Please try again later.\");\n//       });\n//   };\n\n//   const handleAccept = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/:id/accept/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"accepted\" }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(orders.map((order) => (order._id === orderId ? data : order)));\n//         setSelectedOrder(data);\n//         setShowEmailForm(true);\n//         toast.success(\"Order accepted successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error accepting order:\", error);\n//         toast.error(\"Failed to accept the order.\");\n//       });\n//   };\n\n//   const handleReject = (orderId) => {\n//     // Find the order to get the email\n//     const order = orders.find(order => order._id === orderId);\n\n//     fetch(`http://localhost:3003/orders/reject/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"rejected\" }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to reject order\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setOrders(orders.filter((order) => order._id !== orderId));\n//         toast.success(\"Order rejected successfully!\");\n\n//         // Prepare and send rejection email\n//         const emailParams = {\n//           user_name: order.name,\n//           user_email: order.email,\n//           message: `Dear ${order.name}, your order has been rejected.`\n//         };\n\n//         emailjs.send(\n//           \"service_7v4vmve\",  // Your EmailJS service ID\n//           \"template_gswksyh\",  // Your EmailJS template ID\n//           emailParams,\n//           \"hpy_Ow2NKTCTlRRDq\"  // Your EmailJS user ID\n//         ).then(\n//           () => {\n//             console.log(\"Rejection email sent successfully!\");\n//           },\n//           (error) => {\n//             console.log(\"Failed to send rejection email...\", error.text);\n//           }\n//         );\n//       })\n//       .catch((error) => {\n//         console.error(\"Error rejecting order:\", error);\n//         toast.error(\"Failed to reject the order.\");\n//       });\n//   };\n\n//   const sendEmail = (e) => {\n//     e.preventDefault();\n\n//     emailjs\n//       .sendForm(\n//         \"service_7v4vmve\",\n//         \"template_gswksyh\",\n//         form.current,\n//         \"hpy_Ow2NKTCTlRRDq\"\n//       )\n//       .then(\n//         () => {\n//           console.log(\"Email sent successfully!\");\n//           setShowEmailForm(false);\n//         },\n//         (error) => {\n//           console.log(\"Failed to send email...\", error.text);\n//         }\n//       );\n//   };\n\n//   const handleSearchChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     toast.success(\"Logout successfully!\");\n//   };\n\n//   const handleShow = () => setShowModal(true);\n//   const handleClose = () => setShowModal(false);\n\n//   return (\n//     <>\n//       <div className=\"dashboard\">\n//         <div className=\"sidebar\">\n//           <div className=\"sidebar-header\">\n//             <h2>Rare Fairy</h2>\n//           </div>\n//           <ul className=\"sidebar-menu\">\n//             <li>\n//               <Link to=\"/Dashboard\">\n//                 <i className=\"fas fa-tachometer-alt\"></i> Dashboard\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/OrderList\">\n//                 <i className=\"fas fa-shopping-cart\"></i> Order\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Admin\">\n//                 <i className=\"fas fa-users\"></i> Users\n//               </Link>\n//             </li>\n//             <li>\n//               <a href=\"/product\">\n//                 <i className=\"fas fa-box-open\"></i> Product{\" \"}\n//               </a>\n//             </li>\n//             <li>\n//               <Link to=\"/payment\">\n//                 <i className=\"fas fa-credit-card\"></i> Payment\n//               </Link>\n//             </li>\n//             <li>\n//               <Link className=\"a\" to=\"/login\" onClick={handleLogout}>\n//                 <i className=\"fas fa-sign-out-alt\"></i> Logout\n//               </Link>\n//             </li>\n//           </ul>\n//         </div>\n//         <div className=\"main-content\">\n//           <div className=\"header\">\n//             <div className=\"header-left\">\n//               <h1>Welcome to Admin</h1>\n//             </div>\n//             <div className=\"header-right\">\n//               <div className=\"search-bar\">\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Search...\"\n//                   value={search}\n//                   onChange={handleSearchChange}\n//                 />\n//               </div>\n//               <div className=\"notification\">\n//                 <i className=\"fas fa-bell\"></i>\n//               </div>\n//               <div className=\"profile\">\n//                 <img src={customer02} alt=\"Profile\" />\n//                 <span>Manojini Suthakar</span>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"content\">\n//             <div className=\"card-dash\">\n//               <h3>Users</h3>\n//               <p>Number of active users: {usersCount}</p>\n//             </div>\n//             <div className=\"card-dash\">\n//               <h3>Order</h3>\n//               <p>Number of orders: {ordersCount}</p>\n//             </div>\n//             <div className=\"card-dash\">\n//               <Link to=\"/Addproduct\" onClick={handleShow}>\n//                 <h3>Add product</h3>\n//                 <p>Number of products: {productsCount}</p>\n//               </Link>\n//             </div>\n//           </div>\n//           <h1 className=\"order\">Order List</h1>\n//           {error && <p>{error}</p>}\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Name</th>\n//                 <th>Email</th>\n//                 <th>Contact Number</th>\n//                 <th>Address</th>\n//                 <th>Deadline</th>\n//                 <th>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {orders.map((order) => (\n//                 <tr key={order._id}>\n//                   <td>{order.name}</td>\n//                   <td>{order.email}</td>\n//                   <td>{order.contactNumber}</td>\n//                   <td>{order.address}</td>\n//                   <td>{new Date(order.deadline).toLocaleDateString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"accept\"\n//                       onClick={() => handleAccept(order._id)}\n//                     >\n//                       Accept\n//                     </button>\n//                     <button\n//                       className=\"reject\"\n//                       onClick={() => handleReject(order._id)}\n//                     >\n//                       Reject\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//           {showEmailForm && (\n//             <form ref={form} onSubmit={sendEmail}>\n//               <label>Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"user_name\"\n//                 defaultValue={selectedOrder ? selectedOrder.name : \"\"}\n//                 readOnly\n//               />\n//               <label>Email</label>\n//               <input\n//                 type=\"email\"\n//                 name=\"user_email\"\n//                 defaultValue={selectedOrder ? selectedOrder.email : \"\"}\n//                 readOnly\n//               />\n//               <label>Message</label>\n//               <textarea name=\"message\"></textarea>\n//               <input type=\"submit\" value=\"Send\" />\n//             </form>\n//           )}\n//         </div>\n//       </div>\n//       <Modal show={showModal} handleClose={handleClose}>\n//         <ProductForm />\n//       </Modal>\n//       <ToastContainer />\n//     </>\n//   );\n// };\n\n// export default AdminDashboard;\n\n\n\n// Correct URL paths based on your backend routes\nconst fetchUsersCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/user/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setUsersCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching users count:\", error);\n  }\n};\n\nconst fetchOrdersCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setOrdersCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching orders count:\", error);\n  }\n};\n\nconst fetchProductsCount = async () => {\n  try {\n    const response = await fetch(\"http://localhost:3003/image/count\");\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    setProductsCount(data.count);\n  } catch (error) {\n    console.error(\"Error fetching products count:\", error);\n  }\n};\n\nconst fetchOrders = () => {\n  fetch(\"http://localhost:3003/orders\")\n    .then((response) => response.json())\n    .then((data) => {\n      setOrders(data);\n    })\n    .catch((error) => {\n      console.error(\"Error fetching orders:\", error);\n      setError(\"Failed to fetch orders. Please try again later.\");\n    });\n};\n\nconst handleAccept = (orderId) => {\n  fetch(`http://localhost:3003/orders/${orderId}/accept`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ status: \"accepted\" }),\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      setOrders(orders.map((order) => (order._id === orderId ? data : order)));\n      setSelectedOrder(data);\n      setShowEmailForm(true);\n      toast.success(\"Order accepted successfully!\");\n    })\n    .catch((error) => {\n      console.error(\"Error accepting order:\", error);\n      toast.error(\"Failed to accept the order.\");\n    });\n};\n\nconst handleReject = (orderId) => {\n  // Find the order to get the email\n  const order = orders.find(order => order._id === orderId);\n\n  fetch(`http://localhost:3003/orders/${orderId}/reject`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ status: \"rejected\" }),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Failed to reject order\");\n      }\n      return response.json();\n    })\n    .then((data) => {\n      setOrders(orders.filter((order) => order._id !== orderId));\n      toast.success(\"Order rejected successfully!\");\n\n      // Prepare and send rejection email\n      const emailParams = {\n        user_name: order.name,\n        user_email: order.email,\n        message: `Dear ${order.name}, your order has been rejected.`\n      };\n\n      emailjs.send(\n        \"service_7v4vmve\",  // Your EmailJS service ID\n        \"template_gswksyh\",  // Your EmailJS template ID\n        emailParams,\n        \"hpy_Ow2NKTCTlRRDq\"  // Your EmailJS user ID\n      ).then(\n        () => {\n          console.log(\"Rejection email sent successfully!\");\n        },\n        (error) => {\n          console.log(\"Failed to send rejection email...\", error.text);\n        }\n      );\n    })\n    .catch((error) => {\n      console.error(\"Error rejecting order:\", error);\n      toast.error(\"Failed to reject the order.\");\n    });\n};\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}