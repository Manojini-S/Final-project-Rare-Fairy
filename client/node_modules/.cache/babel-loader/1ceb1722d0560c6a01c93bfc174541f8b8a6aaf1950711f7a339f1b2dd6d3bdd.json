{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/OrderDashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"../Components/Modal\"; // Assuming Modal.js is correctly implemented and imported\n// import \"./productadmin.css\";\n// import AdminDashboard from \"./Dashboard\";\n// import emailjs from '@emailjs/browser';\n\n// function OrderList() {\n// \tconst [orders, setOrders] = useState([]);\n// \tconst [error, setError] = useState(null);\n// \tconst [modalIsOpen, setModalIsOpen] = useState(false);\n// \tconst [selectedOrder, setSelectedOrder] = useState(null);\n\n// \tuseEffect(() => {\n// \t\t// Fetch orders when component mounts\n// \t\taxios\n// \t\t\t.get(\"http://localhost:3003/order/orders\")\n// \t\t\t.then((response) => {\n// \t\t\t\tsetOrders(response.data); // Set fetched orders to state\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error fetching orders:\", error);\n// \t\t\t\tsetError(\"Failed to fetch orders. Please try again later.\");\n// \t\t\t});\n// \t}, []);\n\n// \tconst handleAccept = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"accepted\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order accepted:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error accepting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst handleReject = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"rejected\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order rejected:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error rejecting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst sendNotification = (order) => {\n// \t\taxios\n// \t\t\t.post(\"http://localhost:3003/order/notify\", order)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Notification sent:\", response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error sending notification:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst openModal = (order) => {\n// \t\tsetSelectedOrder(order);\n// \t\tsetModalIsOpen(true);\n// \t};\n\n// \treturn (\n//         <>\n\n// \t\t<div>\n\n// \t\t\t<h1 className=\"order\">Order List</h1>\n// \t\t\t{error && <p>{error}</p>}\n// \t\t\t<table>\n// \t\t\t\t<thead>\n// \t\t\t\t\t<tr>\n// \t\t\t\t\t\t<th>Name</th>\n// \t\t\t\t\t\t<th>Gmail</th>\n// \t\t\t\t\t\t<th>Contact Number</th>\n// \t\t\t\t\t\t<th>Address</th>\n// \t\t\t\t\t\t<th>Deadline</th>\n// \t\t\t\t\t\t<th>Actions</th>\n// \t\t\t\t\t</tr>\n// \t\t\t\t</thead>\n// \t\t\t\t<tbody>\n// \t\t\t\t\t{orders.map((order) => (\n// \t\t\t\t\t\t<tr key={order._id}>\n// \t\t\t\t\t\t\t<td>{order.name}</td>\n// \t\t\t\t\t\t\t<td>{order.email}</td>\n// \t\t\t\t\t\t\t<td>{order.contactNumber}</td>\n// \t\t\t\t\t\t\t<td>{order.address}</td>\n// \t\t\t\t\t\t\t<td>{new Date(order.deadline).toLocaleDateString()}</td>\n// \t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t<button className=\"accept\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t\t<button className=\"reject\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t</tr>\n// \t\t\t\t\t))}\n// \t\t\t\t</tbody>\n// \t\t\t</table>\n\n// \t\t\t{modalIsOpen && (\n// \t\t\t\t<Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n// \t\t\t\t\t<h2>Order Confirmation</h2>\n// \t\t\t\t\t{selectedOrder && (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<p>Order ID: {selectedOrder._id}</p>\n// \t\t\t\t\t\t\t<p>Name: {selectedOrder.name}</p>\n// \t\t\t\t\t\t\t<p>Contact Number: {selectedOrder.contactNumber}</p>\n// \t\t\t\t\t\t\t<p>Address: {selectedOrder.address}</p>\n// \t\t\t\t\t\t\t<p>Deadline: {selectedOrder.deadline}</p>\n// \t\t\t\t\t\t\t<p>Are you sure you want to accept/reject this order?</p>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleAccept(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleReject(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)}\n// \t\t\t\t</Modal>\n// \t\t\t)}\n// \t\t</div>\n//         </>\n// \t);\n// }\n\n// export default OrderList;\n\nimport React, { useRef } from 'react';\nimport emailjs from '@emailjs/browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OrderList() {\n  _s();\n  const form = useRef();\n  const sendEmail = e => {\n    e.preventDefault();\n    emailjs.sendForm('service_7v4vmve', 'YOUR_TEMPLATE_ID', form.current, {\n      publicKey: 'YOUR_PUBLIC_KEY'\n    }).then(() => {\n      console.log('SUCCESS!');\n    }, error => {\n      console.log('FAILED...', error.text);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    ref: form,\n    onSubmit: sendEmail,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"user_name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      name: \"user_email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(OrderList, \"dQhLC9DEDZP9Q6oVJIWRdCVKDdw=\");\n_c = OrderList;\n;\nexport default OrderList;\nvar _c;\n$RefreshReg$(_c, \"OrderList\");","map":{"version":3,"names":["React","useRef","emailjs","jsxDEV","_jsxDEV","OrderList","_s","form","sendEmail","e","preventDefault","sendForm","current","publicKey","then","console","log","error","text","ref","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","name","value","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/OrderDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"../Components/Modal\"; // Assuming Modal.js is correctly implemented and imported\n// import \"./productadmin.css\";\n// import AdminDashboard from \"./Dashboard\";\n// import emailjs from '@emailjs/browser';\n\n// function OrderList() {\n// \tconst [orders, setOrders] = useState([]);\n// \tconst [error, setError] = useState(null);\n// \tconst [modalIsOpen, setModalIsOpen] = useState(false);\n// \tconst [selectedOrder, setSelectedOrder] = useState(null);\n\n// \tuseEffect(() => {\n// \t\t// Fetch orders when component mounts\n// \t\taxios\n// \t\t\t.get(\"http://localhost:3003/order/orders\")\n// \t\t\t.then((response) => {\n// \t\t\t\tsetOrders(response.data); // Set fetched orders to state\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error fetching orders:\", error);\n// \t\t\t\tsetError(\"Failed to fetch orders. Please try again later.\");\n// \t\t\t});\n// \t}, []);\n\n// \tconst handleAccept = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"accepted\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order accepted:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error accepting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst handleReject = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"rejected\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order rejected:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error rejecting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst sendNotification = (order) => {\n// \t\taxios\n// \t\t\t.post(\"http://localhost:3003/order/notify\", order)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Notification sent:\", response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error sending notification:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst openModal = (order) => {\n// \t\tsetSelectedOrder(order);\n// \t\tsetModalIsOpen(true);\n// \t};\n\n// \treturn (\n//         <>\n        \n// \t\t<div>\n\t\t\t\n// \t\t\t<h1 className=\"order\">Order List</h1>\n// \t\t\t{error && <p>{error}</p>}\n// \t\t\t<table>\n// \t\t\t\t<thead>\n// \t\t\t\t\t<tr>\n// \t\t\t\t\t\t<th>Name</th>\n// \t\t\t\t\t\t<th>Gmail</th>\n// \t\t\t\t\t\t<th>Contact Number</th>\n// \t\t\t\t\t\t<th>Address</th>\n// \t\t\t\t\t\t<th>Deadline</th>\n// \t\t\t\t\t\t<th>Actions</th>\n// \t\t\t\t\t</tr>\n// \t\t\t\t</thead>\n// \t\t\t\t<tbody>\n// \t\t\t\t\t{orders.map((order) => (\n// \t\t\t\t\t\t<tr key={order._id}>\n// \t\t\t\t\t\t\t<td>{order.name}</td>\n// \t\t\t\t\t\t\t<td>{order.email}</td>\n// \t\t\t\t\t\t\t<td>{order.contactNumber}</td>\n// \t\t\t\t\t\t\t<td>{order.address}</td>\n// \t\t\t\t\t\t\t<td>{new Date(order.deadline).toLocaleDateString()}</td>\n// \t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t<button className=\"accept\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t\t<button className=\"reject\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t</tr>\n// \t\t\t\t\t))}\n// \t\t\t\t</tbody>\n// \t\t\t</table>\n            \n\n// \t\t\t{modalIsOpen && (\n// \t\t\t\t<Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n// \t\t\t\t\t<h2>Order Confirmation</h2>\n// \t\t\t\t\t{selectedOrder && (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<p>Order ID: {selectedOrder._id}</p>\n// \t\t\t\t\t\t\t<p>Name: {selectedOrder.name}</p>\n// \t\t\t\t\t\t\t<p>Contact Number: {selectedOrder.contactNumber}</p>\n// \t\t\t\t\t\t\t<p>Address: {selectedOrder.address}</p>\n// \t\t\t\t\t\t\t<p>Deadline: {selectedOrder.deadline}</p>\n// \t\t\t\t\t\t\t<p>Are you sure you want to accept/reject this order?</p>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleAccept(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleReject(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)}\n// \t\t\t\t</Modal>\n// \t\t\t)}\n// \t\t</div>\n//         </>\n// \t);\n// }\n\n// export default OrderList;\n\n\n\nimport React, { useRef } from 'react';\nimport emailjs from '@emailjs/browser';\n\n function OrderList  () {\n  const form = useRef();\n\n  const sendEmail = (e) => {\n    e.preventDefault();\n\n    emailjs\n      .sendForm('service_7v4vmve', 'YOUR_TEMPLATE_ID', form.current, {\n        publicKey: 'YOUR_PUBLIC_KEY',\n      })\n      .then(\n        () => {\n          console.log('SUCCESS!');\n        },\n        (error) => {\n          console.log('FAILED...', error.text);\n        },\n      );\n  };\n\n  return (\n    <form ref={form} onSubmit={sendEmail}>\n      <label>Name</label>\n      <input type=\"text\" name=\"user_name\" />\n      <label>Email</label>\n      <input type=\"email\" name=\"user_email\" />\n      <label>Message</label>\n      <textarea name=\"message\" />\n      <input type=\"submit\" value=\"Send\" />\n    </form>\n  );\n};\nexport default OrderList;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAA,EAAK;EAAAC,EAAA;EACtB,MAAMC,IAAI,GAAGN,MAAM,CAAC,CAAC;EAErB,MAAMO,SAAS,GAAIC,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElBR,OAAO,CACJS,QAAQ,CAAC,iBAAiB,EAAE,kBAAkB,EAAEJ,IAAI,CAACK,OAAO,EAAE;MAC7DC,SAAS,EAAE;IACb,CAAC,CAAC,CACDC,IAAI,CACH,MAAM;MACJC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACzB,CAAC,EACAC,KAAK,IAAK;MACTF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,KAAK,CAACC,IAAI,CAAC;IACtC,CACF,CAAC;EACL,CAAC;EAED,oBACEd,OAAA;IAAMe,GAAG,EAAEZ,IAAK;IAACa,QAAQ,EAAEZ,SAAU;IAAAa,QAAA,gBACnCjB,OAAA;MAAAiB,QAAA,EAAO;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnBrB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,IAAI,EAAC;IAAW;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCrB,OAAA;MAAAiB,QAAA,EAAO;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACpBrB,OAAA;MAAOsB,IAAI,EAAC,OAAO;MAACC,IAAI,EAAC;IAAY;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxCrB,OAAA;MAAAiB,QAAA,EAAO;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtBrB,OAAA;MAAUuB,IAAI,EAAC;IAAS;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3BrB,OAAA;MAAOsB,IAAI,EAAC,QAAQ;MAACE,KAAK,EAAC;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX;AAACnB,EAAA,CA/BSD,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AA+BlB;AACD,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}