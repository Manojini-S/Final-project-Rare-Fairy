{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js\",\n  _s = $RefreshSig$();\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsEditConfirmationOpen(true);\n//     };\n\n//     const handleDeleteClick = (user) => {\n//         setSelectedUser(user);\n//         setIsDeleteConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         deleteHandler(selectedUser._id);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setSelectedUser(null);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const deleteHandler = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             <h1>Users</h1>\n//             {isEditConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                         <h2>Confirm Delete</h2>\n//                         <p>Are you sure you want to delete this user?</p>\n//                         <button onClick={handleDeleteConfirm}>Yes</button>\n//                         <button onClick={handleDeleteCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );  \n// };\n\n// export default UserTable;\n\nimport './userdetails.css';\nimport './Admin.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTable = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [editedName, setEditedName] = useState('');\n  const [editedEmail, setEditedEmail] = useState('');\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const usersPerPage = 5;\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = () => {\n    fetch('http://localhost:3003/user/getUser').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    }).then(data => setUsers(data)).catch(error => {\n      console.error('Error fetching users:', error);\n      setError('An error occurred while fetching users. Please try again later.');\n    });\n  };\n  const handleEditClick = user => {\n    setSelectedUser(user);\n    setIsEditConfirmationOpen(true);\n  };\n  const handleDeleteClick = user => {\n    setSelectedUser(user);\n    setIsDeleteConfirmationOpen(true);\n  };\n  const handleEditConfirm = () => {\n    setEditedName(selectedUser.Name);\n    setEditedEmail(selectedUser.Email);\n    setIsEditModalOpen(true);\n    setIsEditConfirmationOpen(false);\n  };\n  const handleDeleteConfirm = () => {\n    deleteHandler(selectedUser._id);\n    setIsDeleteConfirmationOpen(false);\n  };\n  const handleEditCancel = () => {\n    setSelectedUser(null);\n    setIsEditConfirmationOpen(false);\n  };\n  const handleDeleteCancel = () => {\n    setSelectedUser(null);\n    setIsDeleteConfirmationOpen(false);\n  };\n  const handleEditSave = e => {\n    e.preventDefault();\n    fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Name: editedName,\n        Email: editedEmail\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update user');\n      }\n      setIsEditModalOpen(false);\n      fetchUsers();\n    }).catch(error => {\n      console.error('Error updating user:', error);\n      setError('An error occurred while updating the user. Please try again later.');\n    });\n  };\n  const deleteHandler = userId => {\n    fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to delete user');\n      }\n      fetchUsers();\n    }).catch(error => {\n      console.error('Error deleting user:', error);\n      setError('An error occurred while deleting the user. Please try again later.');\n    });\n  };\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  const getPaginatedUsers = () => {\n    const indexOfLastUser = currentPage * usersPerPage;\n    const indexOfFirstUser = indexOfLastUser - usersPerPage;\n    return users.slice(indexOfFirstUser, indexOfLastUser);\n  };\n  const totalPages = Math.ceil(users.length / usersPerPage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }, this), isEditConfirmationOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: handleEditCancel,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to edit this user?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditConfirm,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditCancel,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }, this), isDeleteConfirmationOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: handleDeleteCancel,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this user?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeleteConfirm,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeleteCancel,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }, this), isEditModalOpen && selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: () => setIsEditModalOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSave,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedName,\n            onChange: e => setEditedName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: editedEmail,\n            onChange: e => setEditedEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: getPaginatedUsers().map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete\",\n              onClick: () => handleDeleteClick(user),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit\",\n              onClick: () => handleEditClick(user),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 29\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(index + 1),\n        className: currentPage === index + 1 ? 'active' : '',\n        children: index + 1\n      }, index + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 9\n  }, this);\n};\n_s(UserTable, \"CMLpF5xqvY1+kHV5jDVAiKSa1wY=\");\n_c = UserTable;\nexport default UserTable;\nvar _c;\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserTable","_s","users","setUsers","error","setError","selectedUser","setSelectedUser","editedName","setEditedName","editedEmail","setEditedEmail","isEditModalOpen","setIsEditModalOpen","isEditConfirmationOpen","setIsEditConfirmationOpen","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","currentPage","setCurrentPage","usersPerPage","fetchUsers","fetch","then","response","ok","Error","json","data","catch","console","handleEditClick","user","handleDeleteClick","handleEditConfirm","Name","Email","handleDeleteConfirm","deleteHandler","_id","handleEditCancel","handleDeleteCancel","handleEditSave","e","preventDefault","method","headers","body","JSON","stringify","userId","handlePageChange","pageNumber","getPaginatedUsers","indexOfLastUser","indexOfFirstUser","slice","totalPages","Math","ceil","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","target","required","map","Array","from","_","index","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js"],"sourcesContent":["\n\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsEditConfirmationOpen(true);\n//     };\n\n//     const handleDeleteClick = (user) => {\n//         setSelectedUser(user);\n//         setIsDeleteConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         deleteHandler(selectedUser._id);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setSelectedUser(null);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const deleteHandler = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             <h1>Users</h1>\n//             {isEditConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                         <h2>Confirm Delete</h2>\n//                         <p>Are you sure you want to delete this user?</p>\n//                         <button onClick={handleDeleteConfirm}>Yes</button>\n//                         <button onClick={handleDeleteCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );  \n// };\n\n// export default UserTable;\n\n\nimport './userdetails.css';\nimport './Admin.css';\nimport React, { useState, useEffect } from 'react';\n\nconst UserTable = () => {\n    const [users, setUsers] = useState([]);\n    const [error, setError] = useState('');\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [editedName, setEditedName] = useState('');\n    const [editedEmail, setEditedEmail] = useState('');\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n    const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const usersPerPage = 5;\n\n    useEffect(() => {\n        fetchUsers();\n    }, []);\n\n    const fetchUsers = () => {\n        fetch('http://localhost:3003/user/getUser')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch users');\n                }\n                return response.json();\n            })\n            .then(data => setUsers(data))\n            .catch(error => {\n                console.error('Error fetching users:', error);\n                setError('An error occurred while fetching users. Please try again later.');\n            });\n    };\n\n    const handleEditClick = (user) => {\n        setSelectedUser(user);\n        setIsEditConfirmationOpen(true);\n    };\n\n    const handleDeleteClick = (user) => {\n        setSelectedUser(user);\n        setIsDeleteConfirmationOpen(true);\n    };\n\n    const handleEditConfirm = () => {\n        setEditedName(selectedUser.Name);\n        setEditedEmail(selectedUser.Email);\n        setIsEditModalOpen(true);\n        setIsEditConfirmationOpen(false);\n    };\n\n    const handleDeleteConfirm = () => {\n        deleteHandler(selectedUser._id);\n        setIsDeleteConfirmationOpen(false);\n    };\n\n    const handleEditCancel = () => {\n        setSelectedUser(null);\n        setIsEditConfirmationOpen(false);\n    };\n\n    const handleDeleteCancel = () => {\n        setSelectedUser(null);\n        setIsDeleteConfirmationOpen(false);\n    };\n\n    const handleEditSave = (e) => {\n        e.preventDefault();\n        fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ Name: editedName, Email: editedEmail })\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to update user');\n                }\n                setIsEditModalOpen(false);\n                fetchUsers();\n            })\n            .catch(error => {\n                console.error('Error updating user:', error);\n                setError('An error occurred while updating the user. Please try again later.');\n            });\n    };\n\n    const deleteHandler = (userId) => {\n        fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n            method: 'DELETE'\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to delete user');\n                }\n                fetchUsers();\n            })\n            .catch(error => {\n                console.error('Error deleting user:', error);\n                setError('An error occurred while deleting the user. Please try again later.');\n            });\n    };\n\n    const handlePageChange = (pageNumber) => {\n        setCurrentPage(pageNumber);\n    };\n\n    const getPaginatedUsers = () => {\n        const indexOfLastUser = currentPage * usersPerPage;\n        const indexOfFirstUser = indexOfLastUser - usersPerPage;\n        return users.slice(indexOfFirstUser, indexOfLastUser);\n    };\n\n    const totalPages = Math.ceil(users.length / usersPerPage);\n\n    return (\n        <div className=\"container-box\">\n            <h1>Users</h1>\n            {isEditConfirmationOpen && (\n                <div className=\"confirmation-modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n                        <h2>Confirm Edit</h2>\n                        <p>Are you sure you want to edit this user?</p>\n                        <button onClick={handleEditConfirm}>Yes</button>\n                        <button onClick={handleEditCancel}>No</button>\n                    </div>\n                </div>\n            )}\n            {isDeleteConfirmationOpen && (\n                <div className=\"confirmation-modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n                        <h2>Confirm Delete</h2>\n                        <p>Are you sure you want to delete this user?</p>\n                        <button onClick={handleDeleteConfirm}>Yes</button>\n                        <button onClick={handleDeleteCancel}>No</button>\n                    </div>\n                </div>\n            )}\n            {isEditModalOpen && selectedUser && (\n                <div className=\"edit-modal\">\n                    <div className=\"modal-content\">\n                        <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n                        <h2>Edit User</h2>\n                        <form onSubmit={handleEditSave}>\n                            <label>Name:</label>\n                            <input\n                                type=\"text\"\n                                value={editedName}\n                                onChange={(e) => setEditedName(e.target.value)}\n                                required\n                            />\n                            <label>Email:</label>\n                            <input\n                                type=\"email\"\n                                value={editedEmail}\n                                onChange={(e) => setEditedEmail(e.target.value)}\n                                required\n                            />\n                            <button type=\"submit\">Save</button>\n                        </form>\n                    </div>\n                </div>\n            )}\n            {error && <div className=\"error\">Error: {error}</div>}\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Delete</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {getPaginatedUsers().map((user) => (\n                        <tr key={user._id}>\n                            <td>{user.Name}</td>\n                            <td>{user.Email}</td>\n                            <td>\n                                <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n                            </td>\n                            <td>\n                                <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <div className=\"pagination\">\n                {Array.from({ length: totalPages }, (_, index) => (\n                    <button\n                        key={index + 1}\n                        onClick={() => handlePageChange(index + 1)}\n                        className={currentPage === index + 1 ? 'active' : ''}\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default UserTable;\n\n\n"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAO,mBAAmB;AAC1B,OAAO,aAAa;AACpB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}