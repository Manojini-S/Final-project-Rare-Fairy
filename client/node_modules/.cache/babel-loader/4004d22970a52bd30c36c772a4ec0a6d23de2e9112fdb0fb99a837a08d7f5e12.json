{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/product.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Image, Transformation, CloudinaryContext } from 'cloudinary-react';\n// import Modal from '../Components/Modal'; // Assuming Modal.js is in the correct directory\n// import './productadmin.css';\n// import AdminDashboard from './Dashboard';\n\n// function Admin() {\n//     const [products, setProducts] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n//     const [selectedProduct, setSelectedProduct] = useState(null);\n//     const [isEditConfirmationOpen, setEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n//     useEffect(() => {\n//         axios.get('http://localhost:3003/image/getImg')\n//             .then(response => setProducts(response.data))\n//             .catch(error => {\n//                 console.error('Error fetching products:', error);\n//                 setError('An error occurred while fetching products. Please try again later.');\n//             });\n//     }, []);\n\n//     const handleEdit = (product) => {\n//         setSelectedProduct(product);\n//         setEditConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setIsEditModalOpen(true);\n//         setEditConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setEditConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         // Your logic to save edited product details\n//         // Update the products array with the edited product\n//         const updatedProducts = products.map(product => \n//             product._id === selectedProduct._id ? selectedProduct : product\n//         );\n//         setProducts(updatedProducts);\n//         setIsEditModalOpen(false); // Close the edit modal after saving\n//     };\n\n//     const handleDelete = (productId) => {\n//         setSelectedProduct(products.find(product => product._id === productId));\n//         setDeleteConfirmationOpen(true);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         // Your logic to confirm and delete product\n//         setProducts(products.filter(product => product._id !== selectedProduct._id));\n//         setDeleteConfirmationOpen(false); // Close the delete confirmation modal\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setDeleteConfirmationOpen(false);\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n//         setSelectedProduct({\n//             ...selectedProduct,\n//             [name]: value\n//         });\n//     };\n\n//     return (\n//         <>\n//         <div>\n//         <h1 className=\"order\">Rare Fairy Product</h1>\n//             {error ? (\n//                 <div className=\"error\">Error: {error}</div>\n//             ) : (\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Category Name</th>\n//                             <th>Product Name</th>\n//                             <th>Description</th>\n//                             <th>Image</th>\n//                             <th>Edit</th>\n//                             <th>Delete</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {products.map(product => (\n//                             <tr key={product._id}>\n//                                 <td>{product.CategoryName}</td>\n//                                 <td>{product.ProductName}</td>\n//                                 <td>{product.Description}</td>\n//                                 <td>\n//                                     <CloudinaryContext cloudName=\"your_cloud_name\">\n//                                         <Image publicId={product.imageUrl} alt={product.ProductName} style={{ height:\"60px\", width:\"60px\",borderRadius: \"30%\" }}>\n//                                             <Transformation width=\"50\" crop=\"scale\" />\n//                                         </Image>\n//                                     </CloudinaryContext>\n//                                 </td>\n//                                 <td>\n//                                     <button className=\"edit\" onClick={() => handleEdit(product)}>Edit</button>\n//                                 </td>\n//                                 <td>\n//                                     <button className=\"delete\" onClick={() => handleDelete(product._id)}>Delete</button>\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n\n//             <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n//                 <h2>Edit Product</h2>\n//                 {selectedProduct && (\n//                     <form onSubmit={handleEditSave}>\n//                         <label>\n//                             Category Name:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"CategoryName\"\n//                                 value={selectedProduct.CategoryName}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <label>\n//                             Product Name:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"ProductName\"\n//                                 value={selectedProduct.ProductName}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <label>\n//                             Description:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"Description\"\n//                                 value={selectedProduct.Description}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <button type=\"submit\">Save</button>\n//                         <button type=\"button\" onClick={() => setModalIsOpen(false)}>Cancel</button>\n//                     </form>\n//                 )}\n//             </Modal>\n\n//             <div className=\"container-box\">\n//                 {isEditConfirmationOpen && (\n//                     <div className=\"confirmation-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                             <h2>Confirm Edit</h2>\n//                             <p>Are you sure you want to edit this product?</p>\n//                             <button onClick={handleEditConfirm}>Yes</button>\n//                             <button onClick={handleEditCancel}>No</button>\n//                         </div>\n//                     </div>\n//                 )}\n//                 {isDeleteConfirmationOpen && (\n//                     <div className=\"confirmation-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                             <h2>Confirm Delete</h2>\n//                             <p>Are you sure you want to delete this product?</p>\n//                             <button onClick={handleDeleteConfirm}>Yes</button>\n//                             <button onClick={handleDeleteCancel}>No</button>\n//                         </div>\n//                     </div>\n//                 )}\n//                 {isEditModalOpen && selectedProduct && (\n//                     <div className=\"edit-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                             <h2>Edit Product</h2>\n//                             <form onSubmit={handleEditSave}>\n//                                 <label>Category Name:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"CategoryName\"\n//                                     value={selectedProduct.CategoryName}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <label>Product Name:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"ProductName\"\n//                                     value={selectedProduct.ProductName}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <label>Description:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"Description\"\n//                                     value={selectedProduct.Description}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <button type=\"submit\">Save</button>\n//                             </form>\n//                         </div>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//         </>\n//     );\n// }\n\n// export default Admin;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Image, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport Modal from '../Components/Modal';\nimport './productadmin.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Admin() {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [error, setError] = useState(null);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [isEditConfirmationOpen, setEditConfirmationOpen] = useState(false);\n  const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const perPage = 10; // Number of products per page\n\n  useEffect(() => {\n    fetchProducts();\n  }, [currentPage]); // Reload products when currentPage changes\n\n  const fetchProducts = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3003/image/getImg?page=${currentPage}&limit=${perPage}`);\n      setProducts(response.data.products);\n      setTotalPages(Math.ceil(response.data.total / perPage));\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      setError('An error occurred while fetching products. Please try again later.');\n    }\n  };\n  const handleEdit = product => {\n    setSelectedProduct(product);\n    setEditConfirmationOpen(true);\n  };\n  const handleEditConfirm = () => {\n    setIsEditModalOpen(true);\n    setEditConfirmationOpen(false);\n  };\n  const handleEditCancel = () => {\n    setEditConfirmationOpen(false);\n  };\n  const handleEditSave = e => {\n    e.preventDefault();\n    // Logic to save edited product details\n    // Update the products array with the edited product\n    const updatedProducts = products.map(product => product._id === selectedProduct._id ? selectedProduct : product);\n    setProducts(updatedProducts);\n    setIsEditModalOpen(false); // Close the edit modal after saving\n  };\n  const handleDelete = productId => {\n    setSelectedProduct(products.find(product => product._id === productId));\n    setDeleteConfirmationOpen(true);\n  };\n  const handleDeleteConfirm = () => {\n    // Logic to confirm and delete product\n    setProducts(products.filter(product => product._id !== selectedProduct._id));\n    setDeleteConfirmationOpen(false); // Close the delete confirmation modal\n  };\n  const handleDeleteCancel = () => {\n    setDeleteConfirmationOpen(false);\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSelectedProduct({\n      ...selectedProduct,\n      [name]: value\n    });\n  };\n  const goToPage = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"order\",\n        children: \"Rare Fairy Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Category Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: products.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: product.CategoryName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: product.ProductName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: product.Description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(CloudinaryContext, {\n                  cloudName: \"your_cloud_name\",\n                  children: /*#__PURE__*/_jsxDEV(Image, {\n                    publicId: product.imageUrl,\n                    alt: product.ProductName,\n                    style: {\n                      height: '60px',\n                      width: '60px',\n                      borderRadius: '30%'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Transformation, {\n                      width: \"50\",\n                      crop: \"scale\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit\",\n                  onClick: () => handleEdit(product),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete\",\n                  onClick: () => handleDelete(product._id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 41\n              }, this)]\n            }, product._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagination\",\n          children: Array.from({\n            length: totalPages\n          }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goToPage(index + 1),\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalIsOpen,\n        onClose: () => setModalIsOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this), selectedProduct && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSave,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Category Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"CategoryName\",\n              value: selectedProduct.CategoryName,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Product Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"ProductName\",\n              value: selectedProduct.ProductName,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"Description\",\n              value: selectedProduct.Description,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setModalIsOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Admin, \"KGJD5Nc/CLB8DRS4Fr/g67SLQNM=\");\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","axios","Image","Transformation","CloudinaryContext","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","Admin","_s","products","setProducts","error","setError","modalIsOpen","setModalIsOpen","selectedProduct","setSelectedProduct","isEditConfirmationOpen","setEditConfirmationOpen","isDeleteConfirmationOpen","setDeleteConfirmationOpen","isEditModalOpen","setIsEditModalOpen","currentPage","setCurrentPage","totalPages","setTotalPages","perPage","fetchProducts","response","get","data","Math","ceil","total","console","handleEdit","product","handleEditConfirm","handleEditCancel","handleEditSave","e","preventDefault","updatedProducts","map","_id","handleDelete","productId","find","handleDeleteConfirm","filter","handleDeleteCancel","handleInputChange","name","value","target","goToPage","page","children","className","fileName","_jsxFileName","lineNumber","columnNumber","CategoryName","ProductName","Description","cloudName","publicId","imageUrl","alt","style","height","width","borderRadius","crop","onClick","Array","from","length","_","index","isOpen","onClose","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/product.js"],"sourcesContent":["\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Image, Transformation, CloudinaryContext } from 'cloudinary-react';\n// import Modal from '../Components/Modal'; // Assuming Modal.js is in the correct directory\n// import './productadmin.css';\n// import AdminDashboard from './Dashboard';\n\n// function Admin() {\n//     const [products, setProducts] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n//     const [selectedProduct, setSelectedProduct] = useState(null);\n//     const [isEditConfirmationOpen, setEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n//     useEffect(() => {\n//         axios.get('http://localhost:3003/image/getImg')\n//             .then(response => setProducts(response.data))\n//             .catch(error => {\n//                 console.error('Error fetching products:', error);\n//                 setError('An error occurred while fetching products. Please try again later.');\n//             });\n//     }, []);\n\n//     const handleEdit = (product) => {\n//         setSelectedProduct(product);\n//         setEditConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setIsEditModalOpen(true);\n//         setEditConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setEditConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         // Your logic to save edited product details\n//         // Update the products array with the edited product\n//         const updatedProducts = products.map(product => \n//             product._id === selectedProduct._id ? selectedProduct : product\n//         );\n//         setProducts(updatedProducts);\n//         setIsEditModalOpen(false); // Close the edit modal after saving\n//     };\n\n//     const handleDelete = (productId) => {\n//         setSelectedProduct(products.find(product => product._id === productId));\n//         setDeleteConfirmationOpen(true);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         // Your logic to confirm and delete product\n//         setProducts(products.filter(product => product._id !== selectedProduct._id));\n//         setDeleteConfirmationOpen(false); // Close the delete confirmation modal\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setDeleteConfirmationOpen(false);\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n//         setSelectedProduct({\n//             ...selectedProduct,\n//             [name]: value\n//         });\n//     };\n\n//     return (\n//         <>\n//         <div>\n//         <h1 className=\"order\">Rare Fairy Product</h1>\n//             {error ? (\n//                 <div className=\"error\">Error: {error}</div>\n//             ) : (\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Category Name</th>\n//                             <th>Product Name</th>\n//                             <th>Description</th>\n//                             <th>Image</th>\n//                             <th>Edit</th>\n//                             <th>Delete</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {products.map(product => (\n//                             <tr key={product._id}>\n//                                 <td>{product.CategoryName}</td>\n//                                 <td>{product.ProductName}</td>\n//                                 <td>{product.Description}</td>\n//                                 <td>\n//                                     <CloudinaryContext cloudName=\"your_cloud_name\">\n//                                         <Image publicId={product.imageUrl} alt={product.ProductName} style={{ height:\"60px\", width:\"60px\",borderRadius: \"30%\" }}>\n//                                             <Transformation width=\"50\" crop=\"scale\" />\n//                                         </Image>\n//                                     </CloudinaryContext>\n//                                 </td>\n//                                 <td>\n//                                     <button className=\"edit\" onClick={() => handleEdit(product)}>Edit</button>\n//                                 </td>\n//                                 <td>\n//                                     <button className=\"delete\" onClick={() => handleDelete(product._id)}>Delete</button>\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n\n//             <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n//                 <h2>Edit Product</h2>\n//                 {selectedProduct && (\n//                     <form onSubmit={handleEditSave}>\n//                         <label>\n//                             Category Name:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"CategoryName\"\n//                                 value={selectedProduct.CategoryName}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <label>\n//                             Product Name:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"ProductName\"\n//                                 value={selectedProduct.ProductName}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <label>\n//                             Description:\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"Description\"\n//                                 value={selectedProduct.Description}\n//                                 onChange={handleInputChange}\n//                             />\n//                         </label>\n//                         <button type=\"submit\">Save</button>\n//                         <button type=\"button\" onClick={() => setModalIsOpen(false)}>Cancel</button>\n//                     </form>\n//                 )}\n//             </Modal>\n\n//             <div className=\"container-box\">\n//                 {isEditConfirmationOpen && (\n//                     <div className=\"confirmation-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                             <h2>Confirm Edit</h2>\n//                             <p>Are you sure you want to edit this product?</p>\n//                             <button onClick={handleEditConfirm}>Yes</button>\n//                             <button onClick={handleEditCancel}>No</button>\n//                         </div>\n//                     </div>\n//                 )}\n//                 {isDeleteConfirmationOpen && (\n//                     <div className=\"confirmation-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                             <h2>Confirm Delete</h2>\n//                             <p>Are you sure you want to delete this product?</p>\n//                             <button onClick={handleDeleteConfirm}>Yes</button>\n//                             <button onClick={handleDeleteCancel}>No</button>\n//                         </div>\n//                     </div>\n//                 )}\n//                 {isEditModalOpen && selectedProduct && (\n//                     <div className=\"edit-modal\">\n//                         <div className=\"modal-content\">\n//                             <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                             <h2>Edit Product</h2>\n//                             <form onSubmit={handleEditSave}>\n//                                 <label>Category Name:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"CategoryName\"\n//                                     value={selectedProduct.CategoryName}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <label>Product Name:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"ProductName\"\n//                                     value={selectedProduct.ProductName}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <label>Description:</label>\n//                                 <input\n//                                     type=\"text\"\n//                                     name=\"Description\"\n//                                     value={selectedProduct.Description}\n//                                     onChange={handleInputChange}\n//                                 />\n//                                 <button type=\"submit\">Save</button>\n//                             </form>\n//                         </div>\n//                     </div>\n//                 )}\n//             </div>\n//         </div>\n//         </>\n//     );\n// }\n\n// export default Admin;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Image, Transformation, CloudinaryContext } from 'cloudinary-react';\nimport Modal from '../Components/Modal';\nimport './productadmin.css';\n\nfunction Admin() {\n    const [products, setProducts] = useState([]);\n    const [error, setError] = useState(null);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [selectedProduct, setSelectedProduct] = useState(null);\n    const [isEditConfirmationOpen, setEditConfirmationOpen] = useState(false);\n    const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const perPage = 10; // Number of products per page\n\n    useEffect(() => {\n        fetchProducts();\n    }, [currentPage]); // Reload products when currentPage changes\n\n    const fetchProducts = async () => {\n        try {\n            const response = await axios.get(`http://localhost:3003/image/getImg?page=${currentPage}&limit=${perPage}`);\n            setProducts(response.data.products);\n            setTotalPages(Math.ceil(response.data.total / perPage));\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            setError('An error occurred while fetching products. Please try again later.');\n        }\n    };\n\n    const handleEdit = (product) => {\n        setSelectedProduct(product);\n        setEditConfirmationOpen(true);\n    };\n\n    const handleEditConfirm = () => {\n        setIsEditModalOpen(true);\n        setEditConfirmationOpen(false);\n    };\n\n    const handleEditCancel = () => {\n        setEditConfirmationOpen(false);\n    };\n\n    const handleEditSave = (e) => {\n        e.preventDefault();\n        // Logic to save edited product details\n        // Update the products array with the edited product\n        const updatedProducts = products.map((product) =>\n            product._id === selectedProduct._id ? selectedProduct : product\n        );\n        setProducts(updatedProducts);\n        setIsEditModalOpen(false); // Close the edit modal after saving\n    };\n\n    const handleDelete = (productId) => {\n        setSelectedProduct(products.find((product) => product._id === productId));\n        setDeleteConfirmationOpen(true);\n    };\n\n    const handleDeleteConfirm = () => {\n        // Logic to confirm and delete product\n        setProducts(products.filter((product) => product._id !== selectedProduct._id));\n        setDeleteConfirmationOpen(false); // Close the delete confirmation modal\n    };\n\n    const handleDeleteCancel = () => {\n        setDeleteConfirmationOpen(false);\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setSelectedProduct({\n            ...selectedProduct,\n            [name]: value\n        });\n    };\n\n    const goToPage = (page) => {\n        setCurrentPage(page);\n    };\n\n    return (\n        <>\n            <div>\n                <h1 className=\"order\">Rare Fairy Product</h1>\n                {error ? (\n                    <div className=\"error\">Error: {error}</div>\n                ) : (\n                    <>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Category Name</th>\n                                    <th>Product Name</th>\n                                    <th>Description</th>\n                                    <th>Image</th>\n                                    <th>Edit</th>\n                                    <th>Delete</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {products.map((product) => (\n                                    <tr key={product._id}>\n                                        <td>{product.CategoryName}</td>\n                                        <td>{product.ProductName}</td>\n                                        <td>{product.Description}</td>\n                                        <td>\n                                            <CloudinaryContext cloudName=\"your_cloud_name\">\n                                                <Image\n                                                    publicId={product.imageUrl}\n                                                    alt={product.ProductName}\n                                                    style={{ height: '60px', width: '60px', borderRadius: '30%' }}\n                                                >\n                                                    <Transformation width=\"50\" crop=\"scale\" />\n                                                </Image>\n                                            </CloudinaryContext>\n                                        </td>\n                                        <td>\n                                            <button className=\"edit\" onClick={() => handleEdit(product)}>\n                                                Edit\n                                            </button>\n                                        </td>\n                                        <td>\n                                            <button className=\"delete\" onClick={() => handleDelete(product._id)}>\n                                                Delete\n                                            </button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                        <div className=\"pagination\">\n                            {Array.from({ length: totalPages }, (_, index) => (\n                                <button key={index} onClick={() => goToPage(index + 1)}>\n                                    {index + 1}\n                                </button>\n                            ))}\n                        </div>\n                    </>\n                )}\n\n                <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n                    <h2>Edit Product</h2>\n                    {selectedProduct && (\n                        <form onSubmit={handleEditSave}>\n                            <label>\n                                Category Name:\n                                <input\n                                    type=\"text\"\n                                    name=\"CategoryName\"\n                                    value={selectedProduct.CategoryName}\n                                    onChange={handleInputChange}\n                                />\n                            </label>\n                            <label>\n                                Product Name:\n                                <input\n                                    type=\"text\"\n                                    name=\"ProductName\"\n                                    value={selectedProduct.ProductName}\n                                    onChange={handleInputChange}\n                                />\n                            </label>\n                            <label>\n                                Description:\n                                <input\n                                    type=\"text\"\n                                    name=\"Description\"\n                                    value={selectedProduct.Description}\n                                    onChange={handleInputChange}\n                                />\n                            </label>\n                            <button type=\"submit\">Save</button>\n                            <button type=\"button\" onClick={() => setModalIsOpen(false)}>\n                                Cancel\n                            </button>\n                        </form>\n                    )}\n                </Modal>\n\n                <div className=\"container-box\">\n                    {/* Confirmation modals */}\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Admin;\n\n\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}