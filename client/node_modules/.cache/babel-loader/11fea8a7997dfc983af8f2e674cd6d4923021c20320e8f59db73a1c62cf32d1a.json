{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Modal from '../Components/Modal'; // Assuming Modal.js is correctly implemented and imported\n// import './productadmin.css';\n\n// function OrderList() {\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n//     const [selectedOrder, setSelectedOrder] = useState(null);\n//     const [isAcceptConfirmationOpen, setAcceptConfirmationOpen] = useState(false);\n//     const [isRejectConfirmationOpen, setRejectConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         // Fetch orders when component mounts\n//         axios.get('http://localhost:3003/order/orders')\n//             .then(response => {\n//                 setOrders(response.data); // Set fetched orders to state\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching orders:', error);\n//                 setError('Failed to fetch orders. Please try again later.');\n//             });\n//     }, []);\n\n//     const handleAccept = (orderId) => {\n//         axios.patch(`http://localhost:3003/order/orders/${orderId}`, { status: 'accepted' })\n//             .then(response => {\n//                 console.log('Order accepted:', response.data);\n//                 setOrders(orders.map(order => order._id === orderId ? response.data : order));\n//             })\n//             .catch(error => {\n//                 console.error('Error accepting order:', error);\n//             });\n//     };\n\n//     const handleReject = (orderId) => {\n//         axios.patch(`http://localhost:3003/order/orders/${orderId}`, { status: 'rejected' })\n//             .then(response => {\n//                 console.log('Order rejected:', response.data);\n//                 setOrders(orders.map(order => order._id === orderId ? response.data : order));\n//             })\n//             .catch(error => {\n//                 console.error('Error rejecting order:', error);\n//             });\n//     };\n\n//     return (\n//         <div>\n//             <h1>Order List</h1>\n//             {error && <p>{error}</p>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         {/* <th>Order ID</th> */}\n//                         <th>Name</th>\n//                         <th>Contact Number</th>\n//                         <th>Address</th>\n//                         <th>Deadline</th>\n//                         <th>Actions</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {orders.map(order => (\n//                         <tr key={order._id}>\n//                             {/* <td>{order._id}</td> */}\n//                             <td>{order.name}</td>\n//                             <td>{order.contactNumber}</td>\n//                             <td>{order.address}</td>\n//                             <td>{new Date(order.deadline).toLocaleDateString()}</td>\n//                             <td>\n//                                 <button className=\"accept\" onClick={() => handleAccept(order._id)}>Accept</button>\n//                                 <button className=\"reject\" onClick={() => handleReject(order._id)}>Reject</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n\n//             {modalIsOpen && (\n//                 <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n//                     <h2>Order Confirmation</h2>\n//                     {selectedOrder && (\n//                         <div>\n//                             <p>Order ID: {selectedOrder._id}</p>\n//                             <p>Name: {selectedOrder.name}</p>\n//                             <p>Contact Number: {selectedOrder.contactNumber}</p>\n//                             <p>Address: {selectedOrder.address}</p>\n//                             <p>Deadline: {selectedOrder.deadline}</p>\n//                             <p>Are you sure you want to accept/reject this order?</p>\n//                             <button onClick={() => {\n//                                 handleAccept(selectedOrder._id);\n//                                 setModalIsOpen(false);\n//                             }}>Accept</button>\n//                             <button onClick={() => {\n//                                 handleReject(selectedOrder._id);\n//                                 setModalIsOpen(false);\n//                             }}>Reject</button>\n//                         </div>\n//                     )}\n//                 </Modal>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default OrderList;","map":{"version":3,"names":[],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/OrderDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Modal from '../Components/Modal'; // Assuming Modal.js is correctly implemented and imported\n// import './productadmin.css';\n\n// function OrderList() {\n//     const [orders, setOrders] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n//     const [selectedOrder, setSelectedOrder] = useState(null);\n//     const [isAcceptConfirmationOpen, setAcceptConfirmationOpen] = useState(false);\n//     const [isRejectConfirmationOpen, setRejectConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         // Fetch orders when component mounts\n//         axios.get('http://localhost:3003/order/orders')\n//             .then(response => {\n//                 setOrders(response.data); // Set fetched orders to state\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching orders:', error);\n//                 setError('Failed to fetch orders. Please try again later.');\n//             });\n//     }, []);\n\n//     const handleAccept = (orderId) => {\n//         axios.patch(`http://localhost:3003/order/orders/${orderId}`, { status: 'accepted' })\n//             .then(response => {\n//                 console.log('Order accepted:', response.data);\n//                 setOrders(orders.map(order => order._id === orderId ? response.data : order));\n//             })\n//             .catch(error => {\n//                 console.error('Error accepting order:', error);\n//             });\n//     };\n\n//     const handleReject = (orderId) => {\n//         axios.patch(`http://localhost:3003/order/orders/${orderId}`, { status: 'rejected' })\n//             .then(response => {\n//                 console.log('Order rejected:', response.data);\n//                 setOrders(orders.map(order => order._id === orderId ? response.data : order));\n//             })\n//             .catch(error => {\n//                 console.error('Error rejecting order:', error);\n//             });\n//     };\n\n//     return (\n//         <div>\n//             <h1>Order List</h1>\n//             {error && <p>{error}</p>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         {/* <th>Order ID</th> */}\n//                         <th>Name</th>\n//                         <th>Contact Number</th>\n//                         <th>Address</th>\n//                         <th>Deadline</th>\n//                         <th>Actions</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {orders.map(order => (\n//                         <tr key={order._id}>\n//                             {/* <td>{order._id}</td> */}\n//                             <td>{order.name}</td>\n//                             <td>{order.contactNumber}</td>\n//                             <td>{order.address}</td>\n//                             <td>{new Date(order.deadline).toLocaleDateString()}</td>\n//                             <td>\n//                                 <button className=\"accept\" onClick={() => handleAccept(order._id)}>Accept</button>\n//                                 <button className=\"reject\" onClick={() => handleReject(order._id)}>Reject</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n\n//             {modalIsOpen && (\n//                 <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n//                     <h2>Order Confirmation</h2>\n//                     {selectedOrder && (\n//                         <div>\n//                             <p>Order ID: {selectedOrder._id}</p>\n//                             <p>Name: {selectedOrder.name}</p>\n//                             <p>Contact Number: {selectedOrder.contactNumber}</p>\n//                             <p>Address: {selectedOrder.address}</p>\n//                             <p>Deadline: {selectedOrder.deadline}</p>\n//                             <p>Are you sure you want to accept/reject this order?</p>\n//                             <button onClick={() => {\n//                                 handleAccept(selectedOrder._id);\n//                                 setModalIsOpen(false);\n//                             }}>Accept</button>\n//                             <button onClick={() => {\n//                                 handleReject(selectedOrder._id);\n//                                 setModalIsOpen(false);\n//                             }}>Reject</button>\n//                         </div>\n//                     )}\n//                 </Modal>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default OrderList;\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}