{"ast":null,"code":"// import './userdetails.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [clickedRowIndex, setClickedRowIndex] = useState(null);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n//     const handleDeleteClick = (UserId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${UserId}`, {\n//             method: 'DELETE'\n//         })\n//         .then(response => {\n//             if (!response.ok) {\n//                 throw new Error('Failed to delete user');\n//             }\n//             // User deleted successfully, update the user list\n//             return fetchUsers();\n//         })\n//         .then(() => {\n//             // Optionally, you can display a success message or perform other actions here\n//             console.log('User deleted successfully');\n//         })\n//         .catch(error => {\n//             console.error('Error deleting user:', error);\n//             setError('An error occurred while deleting the user. Please try again later.');\n//         });\n//     };\n\n//     const handleVerifyClick = (userId) => {\n//         fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n//             method: 'PUT'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to verify user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error verifying user:', error);\n//                 setError('An error occurred while verifying the user. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user, index) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//         setClickedRowIndex(index);\n//     };\n\n//     const handleEditSave = () => {\n//         // Update user details and close edit modal\n//         const updatedUsers = [...users];\n//         const updatedUser = { ...selectedUser, Name: editedName, Email: editedEmail };\n//         updatedUsers[clickedRowIndex] = updatedUser;\n//         setUsers(updatedUsers);\n//         setIsEditModalOpen(false);\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n\n//             <>\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n\n//             </>\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         {/* <th>Verified</th> */}\n//                         <th>Delete</th>\n//                         <th>Verify</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user, index) => (\n//                         <tr key={user._UserId}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             {/* <td>{user.Verified ? 'Yes' : 'No'}</td> */}\n//                             <td>\n//                                 <button className='delete' onClick={() => handleDeleteClick(user._UserId)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 {!user.Verified && (\n//                                     <button className='verify' onClick={() => handleVerifyClick(user._UserId)}>Verify</button>\n//                                 )}\n//                             </td>\n//                             <td>\n//                                 <button className='edit' onClick={() => handleEditClick(user, index)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n// {/* \n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )} */}\n//         </div>\n//     );\n// };\n\n// export default UserTable;","map":{"version":3,"names":[],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js"],"sourcesContent":["// import './userdetails.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [clickedRowIndex, setClickedRowIndex] = useState(null);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n//     const handleDeleteClick = (UserId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${UserId}`, {\n//             method: 'DELETE'\n//         })\n//         .then(response => {\n//             if (!response.ok) {\n//                 throw new Error('Failed to delete user');\n//             }\n//             // User deleted successfully, update the user list\n//             return fetchUsers();\n//         })\n//         .then(() => {\n//             // Optionally, you can display a success message or perform other actions here\n//             console.log('User deleted successfully');\n//         })\n//         .catch(error => {\n//             console.error('Error deleting user:', error);\n//             setError('An error occurred while deleting the user. Please try again later.');\n//         });\n//     };\n    \n//     const handleVerifyClick = (userId) => {\n//         fetch(`http://localhost:3003/user/verifyUser/${userId}`, {\n//             method: 'PUT'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to verify user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error verifying user:', error);\n//                 setError('An error occurred while verifying the user. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user, index) => {\n//         setSelectedUser(user);\n//         setEditedName(user.Name);\n//         setEditedEmail(user.Email);\n//         setIsEditModalOpen(true);\n//         setClickedRowIndex(index);\n//     };\n\n//     const handleEditSave = () => {\n//         // Update user details and close edit modal\n//         const updatedUsers = [...users];\n//         const updatedUser = { ...selectedUser, Name: editedName, Email: editedEmail };\n//         updatedUsers[clickedRowIndex] = updatedUser;\n//         setUsers(updatedUsers);\n//         setIsEditModalOpen(false);\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n\n//             <>\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n\n//             </>\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         {/* <th>Verified</th> */}\n//                         <th>Delete</th>\n//                         <th>Verify</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user, index) => (\n//                         <tr key={user._UserId}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             {/* <td>{user.Verified ? 'Yes' : 'No'}</td> */}\n//                             <td>\n//                                 <button className='delete' onClick={() => handleDeleteClick(user._UserId)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 {!user.Verified && (\n//                                     <button className='verify' onClick={() => handleVerifyClick(user._UserId)}>Verify</button>\n//                                 )}\n//                             </td>\n//                             <td>\n//                                 <button className='edit' onClick={() => handleEditClick(user, index)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n// {/* \n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\" style={{ top: `${(clickedRowIndex + 1) * 40}px` }}>\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form>\n//                             <label>Name:</label>\n//                             <input type=\"text\" value={editedName} onChange={(e) => setEditedName(e.target.value)} />\n//                             <label>Email:</label>\n//                             <input type=\"email\" value={editedEmail} onChange={(e) => setEditedEmail(e.target.value)} />\n//                             <button onClick={handleEditSave}>Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )} */}\n//         </div>\n//     );\n// };\n\n// export default UserTable;\n\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}