{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"../Components/Modal\"; // Assuming Modal.js is correctly implemented and imported\n// import \"./productadmin.css\";\n// import AdminDashboard from \"./Dashboard\";\n// import emailjs from '@emailjs/browser';\n\n// function OrderList() {\n// \tconst [orders, setOrders] = useState([]);\n// \tconst [error, setError] = useState(null);\n// \tconst [modalIsOpen, setModalIsOpen] = useState(false);\n// \tconst [selectedOrder, setSelectedOrder] = useState(null);\n\n// \tuseEffect(() => {\n// \t\t// Fetch orders when component mounts\n// \t\taxios\n// \t\t\t.get(\"http://localhost:3003/order/orders\")\n// \t\t\t.then((response) => {\n// \t\t\t\tsetOrders(response.data); // Set fetched orders to state\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error fetching orders:\", error);\n// \t\t\t\tsetError(\"Failed to fetch orders. Please try again later.\");\n// \t\t\t});\n// \t}, []);\n\n// \tconst handleAccept = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"accepted\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order accepted:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error accepting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst handleReject = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"rejected\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order rejected:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error rejecting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst sendNotification = (order) => {\n// \t\taxios\n// \t\t\t.post(\"http://localhost:3003/order/notify\", order)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Notification sent:\", response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error sending notification:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst openModal = (order) => {\n// \t\tsetSelectedOrder(order);\n// \t\tsetModalIsOpen(true);\n// \t};\n\n// \treturn (\n//         <>\n\n// \t\t<div>\n\n// \t\t\t<h1 className=\"order\">Order List</h1>\n// \t\t\t{error && <p>{error}</p>}\n// \t\t\t<table>\n// \t\t\t\t<thead>\n// \t\t\t\t\t<tr>\n// \t\t\t\t\t\t<th>Name</th>\n// \t\t\t\t\t\t<th>Gmail</th>\n// \t\t\t\t\t\t<th>Contact Number</th>\n// \t\t\t\t\t\t<th>Address</th>\n// \t\t\t\t\t\t<th>Deadline</th>\n// \t\t\t\t\t\t<th>Actions</th>\n// \t\t\t\t\t</tr>\n// \t\t\t\t</thead>\n// \t\t\t\t<tbody>\n// \t\t\t\t\t{orders.map((order) => (\n// \t\t\t\t\t\t<tr key={order._id}>\n// \t\t\t\t\t\t\t<td>{order.name}</td>\n// \t\t\t\t\t\t\t<td>{order.email}</td>\n// \t\t\t\t\t\t\t<td>{order.contactNumber}</td>\n// \t\t\t\t\t\t\t<td>{order.address}</td>\n// \t\t\t\t\t\t\t<td>{new Date(order.deadline).toLocaleDateString()}</td>\n// \t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t<button className=\"accept\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t\t<button className=\"reject\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t</tr>\n// \t\t\t\t\t))}\n// \t\t\t\t</tbody>\n// \t\t\t</table>\n\n// \t\t\t{modalIsOpen && (\n// \t\t\t\t<Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n// \t\t\t\t\t<h2>Order Confirmation</h2>\n// \t\t\t\t\t{selectedOrder && (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<p>Order ID: {selectedOrder._id}</p>\n// \t\t\t\t\t\t\t<p>Name: {selectedOrder.name}</p>\n// \t\t\t\t\t\t\t<p>Contact Number: {selectedOrder.contactNumber}</p>\n// \t\t\t\t\t\t\t<p>Address: {selectedOrder.address}</p>\n// \t\t\t\t\t\t\t<p>Deadline: {selectedOrder.deadline}</p>\n// \t\t\t\t\t\t\t<p>Are you sure you want to accept/reject this order?</p>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleAccept(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleReject(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)}\n// \t\t\t\t</Modal>\n// \t\t\t)}\n// \t\t</div>\n//         </>\n// \t);\n// }\n\n// export default OrderList;","map":{"version":3,"names":[],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/OrderDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"../Components/Modal\"; // Assuming Modal.js is correctly implemented and imported\n// import \"./productadmin.css\";\n// import AdminDashboard from \"./Dashboard\";\n// import emailjs from '@emailjs/browser';\n\n// function OrderList() {\n// \tconst [orders, setOrders] = useState([]);\n// \tconst [error, setError] = useState(null);\n// \tconst [modalIsOpen, setModalIsOpen] = useState(false);\n// \tconst [selectedOrder, setSelectedOrder] = useState(null);\n\n// \tuseEffect(() => {\n// \t\t// Fetch orders when component mounts\n// \t\taxios\n// \t\t\t.get(\"http://localhost:3003/order/orders\")\n// \t\t\t.then((response) => {\n// \t\t\t\tsetOrders(response.data); // Set fetched orders to state\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error fetching orders:\", error);\n// \t\t\t\tsetError(\"Failed to fetch orders. Please try again later.\");\n// \t\t\t});\n// \t}, []);\n\n// \tconst handleAccept = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"accepted\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order accepted:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error accepting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst handleReject = (orderId) => {\n// \t\taxios\n// \t\t\t.patch(`http://localhost:3003/order/orders/${orderId}`, {\n// \t\t\t\tstatus: \"rejected\",\n// \t\t\t})\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Order rejected:\", response.data);\n// \t\t\t\tsetOrders(\n// \t\t\t\t\torders.map((order) => (order._id === orderId ? response.data : order))\n// \t\t\t\t);\n// \t\t\t\tsendNotification(response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error rejecting order:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst sendNotification = (order) => {\n// \t\taxios\n// \t\t\t.post(\"http://localhost:3003/order/notify\", order)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"Notification sent:\", response.data);\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error sending notification:\", error);\n// \t\t\t});\n// \t};\n\n// \tconst openModal = (order) => {\n// \t\tsetSelectedOrder(order);\n// \t\tsetModalIsOpen(true);\n// \t};\n\n// \treturn (\n//         <>\n        \n// \t\t<div>\n\t\t\t\n// \t\t\t<h1 className=\"order\">Order List</h1>\n// \t\t\t{error && <p>{error}</p>}\n// \t\t\t<table>\n// \t\t\t\t<thead>\n// \t\t\t\t\t<tr>\n// \t\t\t\t\t\t<th>Name</th>\n// \t\t\t\t\t\t<th>Gmail</th>\n// \t\t\t\t\t\t<th>Contact Number</th>\n// \t\t\t\t\t\t<th>Address</th>\n// \t\t\t\t\t\t<th>Deadline</th>\n// \t\t\t\t\t\t<th>Actions</th>\n// \t\t\t\t\t</tr>\n// \t\t\t\t</thead>\n// \t\t\t\t<tbody>\n// \t\t\t\t\t{orders.map((order) => (\n// \t\t\t\t\t\t<tr key={order._id}>\n// \t\t\t\t\t\t\t<td>{order.name}</td>\n// \t\t\t\t\t\t\t<td>{order.email}</td>\n// \t\t\t\t\t\t\t<td>{order.contactNumber}</td>\n// \t\t\t\t\t\t\t<td>{order.address}</td>\n// \t\t\t\t\t\t\t<td>{new Date(order.deadline).toLocaleDateString()}</td>\n// \t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t<button className=\"accept\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t\t<button className=\"reject\" onClick={() => openModal(order)}>\n// \t\t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t</tr>\n// \t\t\t\t\t))}\n// \t\t\t\t</tbody>\n// \t\t\t</table>\n\n// \t\t\t{modalIsOpen && (\n// \t\t\t\t<Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)}>\n// \t\t\t\t\t<h2>Order Confirmation</h2>\n// \t\t\t\t\t{selectedOrder && (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<p>Order ID: {selectedOrder._id}</p>\n// \t\t\t\t\t\t\t<p>Name: {selectedOrder.name}</p>\n// \t\t\t\t\t\t\t<p>Contact Number: {selectedOrder.contactNumber}</p>\n// \t\t\t\t\t\t\t<p>Address: {selectedOrder.address}</p>\n// \t\t\t\t\t\t\t<p>Deadline: {selectedOrder.deadline}</p>\n// \t\t\t\t\t\t\t<p>Are you sure you want to accept/reject this order?</p>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleAccept(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tAccept\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button\n// \t\t\t\t\t\t\t\tonClick={() => {\n// \t\t\t\t\t\t\t\t\thandleReject(selectedOrder._id);\n// \t\t\t\t\t\t\t\t\tsetModalIsOpen(false);\n// \t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\tReject\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)}\n// \t\t\t\t</Modal>\n// \t\t\t)}\n// \t\t</div>\n//         </>\n// \t);\n// }\n\n// export default OrderList;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}