{"ast":null,"code":"\n\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsEditConfirmationOpen(true);\n//     };\n\n//     const handleDeleteClick = (user) => {\n//         setSelectedUser(user);\n//         setIsDeleteConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         deleteHandler(selectedUser._id);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setSelectedUser(null);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const deleteHandler = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             <h1>Users</h1>\n//             {isEditConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                         <h2>Confirm Delete</h2>\n//                         <p>Are you sure you want to delete this user?</p>\n//                         <button onClick={handleDeleteConfirm}>Yes</button>\n//                         <button onClick={handleDeleteCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );  \n// };\n\n// export default UserTable;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import emailjs from \"@emailjs/browser\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import \"./Dashboard.css\";\n// import \"./productadmin.css\";\n// import Admin from \"../Pages/Admin\";\n// import customer02 from \"../Assets/customer02.jpeg\";\n// import Modal from \"../Components/Modal\";\n// import ProductForm from \"./Addproduct\";\n// import './userdetails.css';\n// import './Admin.css';\n\n// const AdminDashboard = () => {\n//   const [search, setSearch] = useState(\"\");\n//   const [showModal, setShowModal] = useState(false);\n//   const [usersCount, setUsersCount] = useState(0);\n//   const [ordersCount, setOrdersCount] = useState(0);\n//   const [productsCount, setProductsCount] = useState(0);\n//   const [orders, setOrders] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [selectedOrder, setSelectedOrder] = useState(null);\n//   const [showEmailForm, setShowEmailForm] = useState(false);\n//   const form = useRef();\n\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [editedName, setEditedName] = useState('');\n//   const [editedEmail, setEditedEmail] = useState('');\n//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//   const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//   const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchUsersCount();\n//     fetchOrdersCount();\n//     fetchProductsCount();\n//     fetchOrders();\n//     fetchUsers();\n//   }, []);\n\n//   const fetchUsersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/user/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setUsersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching users count:\", error);\n//     }\n//   };\n\n//   const fetchOrdersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/orders/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setOrdersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching orders count:\", error);\n//     }\n//   };\n\n//   const fetchProductsCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/products/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setProductsCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching products count:\", error);\n//     }\n//   };\n\n//   const fetchOrders = () => {\n//     fetch(\"http://localhost:3003/order/orders\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching orders:\", error);\n//         setError(\"Failed to fetch orders. Please try again later.\");\n//       });\n//   };\n\n//   const fetchUsers = () => {\n//     fetch('http://localhost:3003/user/getUser')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch users');\n//         }\n//         return response.json();\n//       })\n//       .then(data => setUsers(data))\n//       .catch(error => {\n//         console.error('Error fetching users:', error);\n//         setError('An error occurred while fetching users. Please try again later.');\n//       });\n//   };\n\n//   const handleEditClick = (user) => {\n//     setSelectedUser(user);\n//     setIsEditConfirmationOpen(true);\n//   };\n\n//   const handleDeleteClick = (user) => {\n//     setSelectedUser(user);\n//     setIsDeleteConfirmationOpen(true);\n//   };\n\n//   const handleEditConfirm = () => {\n//     setEditedName(selectedUser.Name);\n//     setEditedEmail(selectedUser.Email);\n//     setIsEditModalOpen(true);\n//     setIsEditConfirmationOpen(false);\n//   };\n\n//   const handleDeleteConfirm = () => {\n//     deleteHandler(selectedUser._id);\n//     setIsDeleteConfirmationOpen(false);\n//   };\n\n//   const handleEditCancel = () => {\n//     setSelectedUser(null);\n//     setIsEditConfirmationOpen(false);\n//   };\n\n//   const handleDeleteCancel = () => {\n//     setSelectedUser(null);\n//     setIsDeleteConfirmationOpen(false);\n//   };\n\n//   const handleEditSave = (e) => {\n//     e.preventDefault();\n//     fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to update user');\n//         }\n//         setIsEditModalOpen(false);\n//         fetchUsers();\n//       })\n//       .catch(error => {\n//         console.error('Error updating user:', error);\n//         setError('An error occurred while updating the user. Please try again later.');\n//       });\n//   };\n\n//   const deleteHandler = (userId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//       method: 'DELETE'\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete user');\n//         }\n//         fetchUsers();\n//       })\n//       .catch(error => {\n//         console.error('Error deleting user:', error);\n//         setError('An error occurred while deleting the user. Please try again later.');\n//       });\n//   };\n\n//   const handleAccept = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"accepted\" }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(orders.map((order) => (order._id === orderId ? data : order)));\n//         setSelectedOrder(data);\n//         setShowEmailForm(true);\n//         toast.success(\"Order accepted successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error accepting order:\", error);\n//         toast.error(\"Failed to accept the order.\");\n//       });\n//   };\n\n//   const handleReject = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"rejected\" }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to reject order\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setOrders(orders.filter((order) => order._id !== orderId));\n//         toast.success(\"Order rejected successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error rejecting order:\", error);\n//         toast.error(\"Failed to reject the order.\");\n//       });\n//   };\n\n//   const sendEmail = (e) => {\n//     e.preventDefault();\n\n//     emailjs\n//       .sendForm(\n//         \"service_7v4vmve\",\n//         \"template_gswksyh\",\n//         form.current,\n//         \"hpy_Ow2NKTCTlRRDq\"\n//       )\n//       .then(\n//         () => {\n//           console.log(\"Email sent successfully!\");\n//           setShowEmailForm(false);\n//         },\n//         (error) => {\n//           console.log(\"Failed to send email...\", error.text);\n//         }\n//       );\n//   };\n\n//   const handleSearchChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     toast.success(\"Logout successfully!\");\n//   };\n\n//   const handleShow = () => setShowModal(true);\n//   const handleClose = () => setShowModal(false);\n\n//   return (\n//     <>\n//       <div className=\"dashboard\">\n//         <div className=\"sidebar\">\n//           <div className=\"sidebar-header\">\n//             <h2>Rare Fairy</h2>\n//           </div>\n//           <ul className=\"sidebar-menu\">\n//             <li>\n//               <Link to=\"/Dashboard\">\n//                 <i className=\"fas fa-tachometer-alt\"></i> Dashboard\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/OrderList\">\n//                 <i className=\"fas fa-shopping-cart\"></i> Order\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Admin\">\n//                 <i className=\"fas fa-users\"></i> Users\n//               </Link>\n//             </li>\n//             <li>\n//               <a href=\"/product\">\n//                 <i className=\"fas fa-box-open\"></i> Product{\" \"}\n//               </a>\n//             </li>\n//             <li>\n//               <Link to=\"/payment\">\n//                 <i className=\"fas fa-credit-card\"></i> Payment\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Chart\">\n//                 <i className=\"fas fa-chart-line\"></i> Chart\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Addproduct\">\n//                 <i className=\"fas fa-plus\"></i> Add Product\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/\" onClick={handleLogout}>\n//                 <i className=\"fas fa-sign-out-alt\"></i> Logout\n//               </Link>\n//             </li>\n//           </ul>\n//         </div>\n//         <div className=\"main-content\">\n//           <div className=\"header\">\n//             <div className=\"search-bar\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Search...\"\n//                 value={search}\n//                 onChange={handleSearchChange}\n//               />\n//               <button type=\"submit\">\n//                 <i className=\"fas fa-search\"></i>\n//               </button>\n//             </div>\n//             <div className=\"profile\">\n//               <img src={customer02} alt=\"Profile\" />\n//             </div>\n//           </div>\n//           <div className=\"stats\">\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-users\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{usersCount}</h3>\n//                 <p>Users</p>\n//               </div>\n//             </div>\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-shopping-cart\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{ordersCount}</h3>\n//                 <p>Orders</p>\n//               </div>\n//             </div>\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-box-open\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{productsCount}</h3>\n//                 <p>Products</p>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"orders\">\n//             <h2>Orders</h2>\n//             {error && <div className=\"error\">{error}</div>}\n//             <table>\n//               <thead>\n//                 <tr>\n//                   <th>Order ID</th>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Status</th>\n//                   <th>Accept</th>\n//                   <th>Reject</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order) => (\n//                   <tr key={order._id}>\n//                     <td>{order._id}</td>\n//                     <td>{order.name}</td>\n//                     <td>{order.email}</td>\n//                     <td>{order.status}</td>\n//                     <td>\n//                       <button onClick={() => handleAccept(order._id)}>\n//                         Accept\n//                       </button>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleReject(order._id)}>\n//                         Reject\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           {showEmailForm && (\n//             <form ref={form} onSubmit={sendEmail}>\n//               <label>Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"user_name\"\n//                 defaultValue={selectedOrder ? selectedOrder.name : \"\"}\n//                 readOnly\n//               />\n//               <label>Email</label>\n//               <input\n//                 type=\"email\"\n//                 name=\"user_email\"\n//                 defaultValue={selectedOrder ? selectedOrder.email : \"\"}\n//                 readOnly\n//               />\n//               <label>Message</label>\n//               <textarea name=\"message\"></textarea>\n//               <input type=\"submit\" value=\"Send\" />\n//             </form>\n//           )}\n//           <div className=\"user-table\">\n//             <h2>Users</h2>\n//             {isEditConfirmationOpen && (\n//               <div className=\"confirmation-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                   <h2>Confirm Edit</h2>\n//                   <p>Are you sure you want to edit this user?</p>\n//                   <button onClick={handleEditConfirm}>Yes</button>\n//                   <button onClick={handleEditCancel}>No</button>\n//                 </div>\n//               </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//               <div className=\"confirmation-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                   <h2>Confirm Delete</h2>\n//                   <p>Are you sure you want to delete this user?</p>\n//                   <button onClick={handleDeleteConfirm}>Yes</button>\n//                   <button onClick={handleDeleteCancel}>No</button>\n//                 </div>\n//               </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//               <div className=\"edit-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                   <h2>Edit User</h2>\n//                   <form onSubmit={handleEditSave}>\n//                     <label>Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       value={editedName}\n//                       onChange={(e) => setEditedName(e.target.value)}\n//                       required\n//                     />\n//                     <label>Email:</label>\n//                     <input\n//                       type=\"email\"\n//                       value={editedEmail}\n//                       onChange={(e) => setEditedEmail(e.target.value)}\n//                       required\n//                     />\n//                     <button type=\"submit\">Save</button>\n//                   </form>\n//                 </div>\n//               </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//               <thead>\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Delete</th>\n//                   <th>Edit</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map((user) => (\n//                   <tr key={user._id}>\n//                     <td>{user.Name}</td>\n//                     <td>{user.Email}</td>\n//                     <td>\n//                       <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                     </td>\n//                     <td>\n//                       <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           <Admin />\n//         </div>\n//       </div>\n//       <Modal show={showModal} handleClose={handleClose}>\n//         <ProductForm />\n//       </Modal>\n//       <ToastContainer />\n//     </>\n//   );\n// };\n\n// export default AdminDashboard;","map":{"version":3,"names":[],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Admin.js"],"sourcesContent":["\n\n// import './userdetails.css';\n// import './Admin.css';\n// import React, { useState, useEffect } from 'react';\n\n// const UserTable = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState('');\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [editedName, setEditedName] = useState('');\n//     const [editedEmail, setEditedEmail] = useState('');\n//     const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//     const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//     const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     const fetchUsers = () => {\n//         fetch('http://localhost:3003/user/getUser')\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch users');\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => setUsers(data))\n//             .catch(error => {\n//                 console.error('Error fetching users:', error);\n//                 setError('An error occurred while fetching users. Please try again later.');\n//             });\n//     };\n\n//     const handleEditClick = (user) => {\n//         setSelectedUser(user);\n//         setIsEditConfirmationOpen(true);\n//     };\n\n//     const handleDeleteClick = (user) => {\n//         setSelectedUser(user);\n//         setIsDeleteConfirmationOpen(true);\n//     };\n\n//     const handleEditConfirm = () => {\n//         setEditedName(selectedUser.Name);\n//         setEditedEmail(selectedUser.Email);\n//         setIsEditModalOpen(true);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteConfirm = () => {\n//         deleteHandler(selectedUser._id);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditCancel = () => {\n//         setSelectedUser(null);\n//         setIsEditConfirmationOpen(false);\n//     };\n\n//     const handleDeleteCancel = () => {\n//         setSelectedUser(null);\n//         setIsDeleteConfirmationOpen(false);\n//     };\n\n//     const handleEditSave = (e) => {\n//         e.preventDefault();\n//         fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//             method: 'PUT',\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to update user');\n//                 }\n//                 setIsEditModalOpen(false);\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error updating user:', error);\n//                 setError('An error occurred while updating the user. Please try again later.');\n//             });\n//     };\n\n//     const deleteHandler = (userId) => {\n//         fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//             method: 'DELETE'\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Failed to delete user');\n//                 }\n//                 fetchUsers();\n//             })\n//             .catch(error => {\n//                 console.error('Error deleting user:', error);\n//                 setError('An error occurred while deleting the user. Please try again later.');\n//             });\n//     };\n\n//     return (\n//         <div className=\"container-box\">\n//             <h1>Users</h1>\n//             {isEditConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                         <h2>Confirm Edit</h2>\n//                         <p>Are you sure you want to edit this user?</p>\n//                         <button onClick={handleEditConfirm}>Yes</button>\n//                         <button onClick={handleEditCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//                 <div className=\"confirmation-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                         <h2>Confirm Delete</h2>\n//                         <p>Are you sure you want to delete this user?</p>\n//                         <button onClick={handleDeleteConfirm}>Yes</button>\n//                         <button onClick={handleDeleteCancel}>No</button>\n//                     </div>\n//                 </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//                 <div className=\"edit-modal\">\n//                     <div className=\"modal-content\">\n//                         <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                         <h2>Edit User</h2>\n//                         <form onSubmit={handleEditSave}>\n//                             <label>Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={editedName}\n//                                 onChange={(e) => setEditedName(e.target.value)}\n//                                 required\n//                             />\n//                             <label>Email:</label>\n//                             <input\n//                                 type=\"email\"\n//                                 value={editedEmail}\n//                                 onChange={(e) => setEditedEmail(e.target.value)}\n//                                 required\n//                             />\n//                             <button type=\"submit\">Save</button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Delete</th>\n//                         <th>Edit</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user._id}>\n//                             <td>{user.Name}</td>\n//                             <td>{user.Email}</td>\n//                             <td>\n//                                 <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                             </td>\n//                             <td>\n//                                 <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );  \n// };\n\n// export default UserTable;\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import emailjs from \"@emailjs/browser\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import \"./Dashboard.css\";\n// import \"./productadmin.css\";\n// import Admin from \"../Pages/Admin\";\n// import customer02 from \"../Assets/customer02.jpeg\";\n// import Modal from \"../Components/Modal\";\n// import ProductForm from \"./Addproduct\";\n// import './userdetails.css';\n// import './Admin.css';\n\n// const AdminDashboard = () => {\n//   const [search, setSearch] = useState(\"\");\n//   const [showModal, setShowModal] = useState(false);\n//   const [usersCount, setUsersCount] = useState(0);\n//   const [ordersCount, setOrdersCount] = useState(0);\n//   const [productsCount, setProductsCount] = useState(0);\n//   const [orders, setOrders] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [selectedOrder, setSelectedOrder] = useState(null);\n//   const [showEmailForm, setShowEmailForm] = useState(false);\n//   const form = useRef();\n\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [editedName, setEditedName] = useState('');\n//   const [editedEmail, setEditedEmail] = useState('');\n//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n//   const [isEditConfirmationOpen, setIsEditConfirmationOpen] = useState(false);\n//   const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchUsersCount();\n//     fetchOrdersCount();\n//     fetchProductsCount();\n//     fetchOrders();\n//     fetchUsers();\n//   }, []);\n\n//   const fetchUsersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/user/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setUsersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching users count:\", error);\n//     }\n//   };\n\n//   const fetchOrdersCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/orders/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setOrdersCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching orders count:\", error);\n//     }\n//   };\n\n//   const fetchProductsCount = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3003/products/count\");\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setProductsCount(data.count);\n//     } catch (error) {\n//       console.error(\"Error fetching products count:\", error);\n//     }\n//   };\n\n//   const fetchOrders = () => {\n//     fetch(\"http://localhost:3003/order/orders\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching orders:\", error);\n//         setError(\"Failed to fetch orders. Please try again later.\");\n//       });\n//   };\n\n//   const fetchUsers = () => {\n//     fetch('http://localhost:3003/user/getUser')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch users');\n//         }\n//         return response.json();\n//       })\n//       .then(data => setUsers(data))\n//       .catch(error => {\n//         console.error('Error fetching users:', error);\n//         setError('An error occurred while fetching users. Please try again later.');\n//       });\n//   };\n\n//   const handleEditClick = (user) => {\n//     setSelectedUser(user);\n//     setIsEditConfirmationOpen(true);\n//   };\n\n//   const handleDeleteClick = (user) => {\n//     setSelectedUser(user);\n//     setIsDeleteConfirmationOpen(true);\n//   };\n\n//   const handleEditConfirm = () => {\n//     setEditedName(selectedUser.Name);\n//     setEditedEmail(selectedUser.Email);\n//     setIsEditModalOpen(true);\n//     setIsEditConfirmationOpen(false);\n//   };\n\n//   const handleDeleteConfirm = () => {\n//     deleteHandler(selectedUser._id);\n//     setIsDeleteConfirmationOpen(false);\n//   };\n\n//   const handleEditCancel = () => {\n//     setSelectedUser(null);\n//     setIsEditConfirmationOpen(false);\n//   };\n\n//   const handleDeleteCancel = () => {\n//     setSelectedUser(null);\n//     setIsDeleteConfirmationOpen(false);\n//   };\n\n//   const handleEditSave = (e) => {\n//     e.preventDefault();\n//     fetch(`http://localhost:3003/user/updateUser/${selectedUser._id}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify({ Name: editedName, Email: editedEmail })\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to update user');\n//         }\n//         setIsEditModalOpen(false);\n//         fetchUsers();\n//       })\n//       .catch(error => {\n//         console.error('Error updating user:', error);\n//         setError('An error occurred while updating the user. Please try again later.');\n//       });\n//   };\n\n//   const deleteHandler = (userId) => {\n//     fetch(`http://localhost:3003/user/deleteUser/${userId}`, {\n//       method: 'DELETE'\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete user');\n//         }\n//         fetchUsers();\n//       })\n//       .catch(error => {\n//         console.error('Error deleting user:', error);\n//         setError('An error occurred while deleting the user. Please try again later.');\n//       });\n//   };\n\n//   const handleAccept = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"accepted\" }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setOrders(orders.map((order) => (order._id === orderId ? data : order)));\n//         setSelectedOrder(data);\n//         setShowEmailForm(true);\n//         toast.success(\"Order accepted successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error accepting order:\", error);\n//         toast.error(\"Failed to accept the order.\");\n//       });\n//   };\n\n//   const handleReject = (orderId) => {\n//     fetch(`http://localhost:3003/order/orders/${orderId}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ status: \"rejected\" }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to reject order\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setOrders(orders.filter((order) => order._id !== orderId));\n//         toast.success(\"Order rejected successfully!\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error rejecting order:\", error);\n//         toast.error(\"Failed to reject the order.\");\n//       });\n//   };\n\n//   const sendEmail = (e) => {\n//     e.preventDefault();\n\n//     emailjs\n//       .sendForm(\n//         \"service_7v4vmve\",\n//         \"template_gswksyh\",\n//         form.current,\n//         \"hpy_Ow2NKTCTlRRDq\"\n//       )\n//       .then(\n//         () => {\n//           console.log(\"Email sent successfully!\");\n//           setShowEmailForm(false);\n//         },\n//         (error) => {\n//           console.log(\"Failed to send email...\", error.text);\n//         }\n//       );\n//   };\n\n//   const handleSearchChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     toast.success(\"Logout successfully!\");\n//   };\n\n//   const handleShow = () => setShowModal(true);\n//   const handleClose = () => setShowModal(false);\n\n//   return (\n//     <>\n//       <div className=\"dashboard\">\n//         <div className=\"sidebar\">\n//           <div className=\"sidebar-header\">\n//             <h2>Rare Fairy</h2>\n//           </div>\n//           <ul className=\"sidebar-menu\">\n//             <li>\n//               <Link to=\"/Dashboard\">\n//                 <i className=\"fas fa-tachometer-alt\"></i> Dashboard\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/OrderList\">\n//                 <i className=\"fas fa-shopping-cart\"></i> Order\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Admin\">\n//                 <i className=\"fas fa-users\"></i> Users\n//               </Link>\n//             </li>\n//             <li>\n//               <a href=\"/product\">\n//                 <i className=\"fas fa-box-open\"></i> Product{\" \"}\n//               </a>\n//             </li>\n//             <li>\n//               <Link to=\"/payment\">\n//                 <i className=\"fas fa-credit-card\"></i> Payment\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Chart\">\n//                 <i className=\"fas fa-chart-line\"></i> Chart\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/Addproduct\">\n//                 <i className=\"fas fa-plus\"></i> Add Product\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"/\" onClick={handleLogout}>\n//                 <i className=\"fas fa-sign-out-alt\"></i> Logout\n//               </Link>\n//             </li>\n//           </ul>\n//         </div>\n//         <div className=\"main-content\">\n//           <div className=\"header\">\n//             <div className=\"search-bar\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Search...\"\n//                 value={search}\n//                 onChange={handleSearchChange}\n//               />\n//               <button type=\"submit\">\n//                 <i className=\"fas fa-search\"></i>\n//               </button>\n//             </div>\n//             <div className=\"profile\">\n//               <img src={customer02} alt=\"Profile\" />\n//             </div>\n//           </div>\n//           <div className=\"stats\">\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-users\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{usersCount}</h3>\n//                 <p>Users</p>\n//               </div>\n//             </div>\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-shopping-cart\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{ordersCount}</h3>\n//                 <p>Orders</p>\n//               </div>\n//             </div>\n//             <div className=\"stat-item\">\n//               <i className=\"fas fa-box-open\"></i>\n//               <div className=\"stat-info\">\n//                 <h3>{productsCount}</h3>\n//                 <p>Products</p>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"orders\">\n//             <h2>Orders</h2>\n//             {error && <div className=\"error\">{error}</div>}\n//             <table>\n//               <thead>\n//                 <tr>\n//                   <th>Order ID</th>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Status</th>\n//                   <th>Accept</th>\n//                   <th>Reject</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order) => (\n//                   <tr key={order._id}>\n//                     <td>{order._id}</td>\n//                     <td>{order.name}</td>\n//                     <td>{order.email}</td>\n//                     <td>{order.status}</td>\n//                     <td>\n//                       <button onClick={() => handleAccept(order._id)}>\n//                         Accept\n//                       </button>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleReject(order._id)}>\n//                         Reject\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           {showEmailForm && (\n//             <form ref={form} onSubmit={sendEmail}>\n//               <label>Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"user_name\"\n//                 defaultValue={selectedOrder ? selectedOrder.name : \"\"}\n//                 readOnly\n//               />\n//               <label>Email</label>\n//               <input\n//                 type=\"email\"\n//                 name=\"user_email\"\n//                 defaultValue={selectedOrder ? selectedOrder.email : \"\"}\n//                 readOnly\n//               />\n//               <label>Message</label>\n//               <textarea name=\"message\"></textarea>\n//               <input type=\"submit\" value=\"Send\" />\n//             </form>\n//           )}\n//           <div className=\"user-table\">\n//             <h2>Users</h2>\n//             {isEditConfirmationOpen && (\n//               <div className=\"confirmation-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={handleEditCancel}>&times;</span>\n//                   <h2>Confirm Edit</h2>\n//                   <p>Are you sure you want to edit this user?</p>\n//                   <button onClick={handleEditConfirm}>Yes</button>\n//                   <button onClick={handleEditCancel}>No</button>\n//                 </div>\n//               </div>\n//             )}\n//             {isDeleteConfirmationOpen && (\n//               <div className=\"confirmation-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={handleDeleteCancel}>&times;</span>\n//                   <h2>Confirm Delete</h2>\n//                   <p>Are you sure you want to delete this user?</p>\n//                   <button onClick={handleDeleteConfirm}>Yes</button>\n//                   <button onClick={handleDeleteCancel}>No</button>\n//                 </div>\n//               </div>\n//             )}\n//             {isEditModalOpen && selectedUser && (\n//               <div className=\"edit-modal\">\n//                 <div className=\"modal-content\">\n//                   <span className=\"close\" onClick={() => setIsEditModalOpen(false)}>&times;</span>\n//                   <h2>Edit User</h2>\n//                   <form onSubmit={handleEditSave}>\n//                     <label>Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       value={editedName}\n//                       onChange={(e) => setEditedName(e.target.value)}\n//                       required\n//                     />\n//                     <label>Email:</label>\n//                     <input\n//                       type=\"email\"\n//                       value={editedEmail}\n//                       onChange={(e) => setEditedEmail(e.target.value)}\n//                       required\n//                     />\n//                     <button type=\"submit\">Save</button>\n//                   </form>\n//                 </div>\n//               </div>\n//             )}\n//             {error && <div className=\"error\">Error: {error}</div>}\n//             <table>\n//               <thead>\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   <th>Delete</th>\n//                   <th>Edit</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map((user) => (\n//                   <tr key={user._id}>\n//                     <td>{user.Name}</td>\n//                     <td>{user.Email}</td>\n//                     <td>\n//                       <button className=\"delete\" onClick={() => handleDeleteClick(user)}>Delete</button>\n//                     </td>\n//                     <td>\n//                       <button className=\"edit\" onClick={() => handleEditClick(user)}>Edit</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//           <Admin />\n//         </div>\n//       </div>\n//       <Modal show={showModal} handleClose={handleClose}>\n//         <ProductForm />\n//       </Modal>\n//       <ToastContainer />\n//     </>\n//   );\n// };\n\n// export default AdminDashboard;\n\n"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}