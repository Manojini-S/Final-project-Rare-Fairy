{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/ari-pro/client/src/Pages/Register.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './Register.css';\n// import Navbar from '../Components/Navbar';\n// import { Link, useNavigate } from 'react-router-dom';\n\n// function RegistrationForm() {\n//   const [fullname, setFullName] = useState('');\n//   const [username, setUserName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmpassword, setConfirmPassword] = useState('');\n//   const [errors, setErrors] = useState({});\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const navigate = useNavigate();\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!fullname) newErrors.fullname = \"Full Name is required\";\n//     if (!username) newErrors.username = \"User Name is required\";\n//     if (!email) newErrors.email = \"Email is required\";\n//     else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = \"Email is invalid\";\n//     if (!password) newErrors.password = \"Password is required\";\n//     else if (password.length < 8) newErrors.password = \"Password must be at least 8 characters\";\n//     else if (!/[A-Z]/.test(password)) newErrors.password = \"Password must contain at least one uppercase letter\";\n//     else if (!/[a-z]/.test(password)) newErrors.password = \"Password must contain at least one lowercase letter\";\n//     else if (!/[0-9]/.test(password)) newErrors.password = \"Password must contain at least one number\";\n//     if (!confirmpassword) newErrors.confirmpassword = \"Confirm Password is required\";\n//     else if (password !== confirmpassword) newErrors.confirmpassword = \"Passwords do not match\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const newErrors = validate();\n//     if (Object.keys(newErrors).length > 0) {\n//       setErrors(newErrors);\n//       return;\n//     }\n\n//     setIsSubmitting(true);\n//     const result = { UserId: username, Name: fullname, Email: email, Password: password, Role: \"user\" };\n\n//     try {\n//       const response = await fetch('http://localhost:3003/usercreate/signup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(result),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         setErrors({ apiError: errorData.message });\n//         setIsSubmitting(false);\n//         return;\n//       }\n\n//       const data = await response.json();\n//       console.log('Success:', data);\n//       navigate('/login'); // Redirect to login page after successful registration\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setErrors({ apiError: 'An error occurred. Please try again later.' });\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"Register-center\">\n//         <h1>Registration Form</h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"text\" \n//               required \n//               value={fullname} \n//               onChange={(e) => setFullName(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Full Name</label>\n//             {errors.fullname && <span className=\"error\">{errors.fullname}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"text\" \n//               required \n//               value={username} \n//               onChange={(e) => setUserName(e.target.value)} \n//             />\n//             <span></span>\n//             <label>User Name</label>\n//             {errors.username && <span className=\"error\">{errors.username}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"email\" \n//               required \n//               value={email} \n//               onChange={(e) => setEmail(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Email</label>\n//             {errors.email && <span className=\"error\">{errors.email}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"password\" \n//               required \n//               value={password} \n//               onChange={(e) => setPassword(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Password</label>\n//             {errors.password && <span className=\"error\">{errors.password}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"password\" \n//               required \n//               value={confirmpassword} \n//               onChange={(e) => setConfirmPassword(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Confirm Password</label>\n//             {errors.confirmpassword && <h1 className=\"error\">{errors.confirmpassword}</h1>}\n//           </div>\n//           <input type=\"submit\" value=\"Register Now\" disabled={isSubmitting} />\n//           {isSubmitting && <span className=\"loading\">Registred successful</span>}\n//           {errors.apiError && <span className=\"error\">{errors.apiError}</span>}\n//           <Link to=\"/Popup\"></Link>\n//         </form>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default RegistrationForm;\n\nimport React, { useState } from 'react';\nimport './Register.css';\nimport Navbar from '../Components/Navbar';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Modal from '../Components/Modal';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RegistrationForm() {\n  _s();\n  const [fullname, setFullName] = useState('');\n  const [username, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmpassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const navigate = useNavigate();\n  const validate = () => {\n    const newErrors = {};\n    if (!fullname) newErrors.fullname = \"Full Name is required\";\n    if (!username) newErrors.username = \"User Name is required\";\n    if (!email) newErrors.email = \"Email is required\";else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = \"Email is invalid\";\n    if (!password) newErrors.password = \"Password is required\";else if (password.length < 8) newErrors.password = \"Password must be at least 8 characters\";else if (!/[A-Z]/.test(password)) newErrors.password = \"Password must contain at least one uppercase letter\";else if (!/[a-z]/.test(password)) newErrors.password = \"Password must contain at least one lowercase letter\";else if (!/[0-9]/.test(password)) newErrors.password = \"Password must contain at least one number\";\n    if (!confirmpassword) newErrors.confirmpassword = \"Confirm Password is required\";else if (password !== confirmpassword) newErrors.confirmpassword = \"Passwords do not match\";\n    return newErrors;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const newErrors = validate();\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n    setIsSubmitting(true);\n    const result = {\n      UserId: username,\n      Name: fullname,\n      Email: email,\n      Password: password,\n      Role: \"user\"\n    };\n    try {\n      const response = await fetch('http://localhost:3003/usercreate/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(result)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        setErrors({\n          apiError: errorData.message\n        });\n        setIsSubmitting(false);\n        return;\n      }\n      setIsModalOpen(true); // Open the modal on successful registration\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({\n        apiError: 'An error occurred. Please try again later.'\n      });\n      setIsSubmitting(false);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    navigate('/login'); // Redirect to login page after closing the modal\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Register-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Registration Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            value: fullname,\n            onChange: e => setFullName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), errors.fullname && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error\",\n            children: errors.fullname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            value: username,\n            onChange: e => setUserName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"User Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), errors.username && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error\",\n            children: errors.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            required: true,\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error\",\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            required: true,\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), errors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error\",\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            required: true,\n            value: confirmpassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), errors.confirmpassword && /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"error\",\n            children: errors.confirmpassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Register Now\",\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), errors.apiError && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Popup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        message: \"Registration successful!\",\n        onClose: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(RegistrationForm, \"QbZdAhV81QdVRhrbQryGBxu05tg=\", false, function () {\n  return [useNavigate];\n});\n_c = RegistrationForm;\nexport default RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","useState","Navbar","Link","useNavigate","Modal","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","RegistrationForm","_s","fullname","setFullName","username","setUserName","email","setEmail","password","setPassword","confirmpassword","setConfirmPassword","errors","setErrors","isSubmitting","setIsSubmitting","isModalOpen","setIsModalOpen","navigate","validate","newErrors","test","length","handleSubmit","e","preventDefault","Object","keys","result","UserId","Name","Email","Password","Role","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","apiError","message","error","console","closeModal","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","required","value","onChange","target","disabled","to","isOpen","onClose","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/ari-pro/client/src/Pages/Register.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './Register.css';\n// import Navbar from '../Components/Navbar';\n// import { Link, useNavigate } from 'react-router-dom';\n\n// function RegistrationForm() {\n//   const [fullname, setFullName] = useState('');\n//   const [username, setUserName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmpassword, setConfirmPassword] = useState('');\n//   const [errors, setErrors] = useState({});\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const navigate = useNavigate();\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!fullname) newErrors.fullname = \"Full Name is required\";\n//     if (!username) newErrors.username = \"User Name is required\";\n//     if (!email) newErrors.email = \"Email is required\";\n//     else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = \"Email is invalid\";\n//     if (!password) newErrors.password = \"Password is required\";\n//     else if (password.length < 8) newErrors.password = \"Password must be at least 8 characters\";\n//     else if (!/[A-Z]/.test(password)) newErrors.password = \"Password must contain at least one uppercase letter\";\n//     else if (!/[a-z]/.test(password)) newErrors.password = \"Password must contain at least one lowercase letter\";\n//     else if (!/[0-9]/.test(password)) newErrors.password = \"Password must contain at least one number\";\n//     if (!confirmpassword) newErrors.confirmpassword = \"Confirm Password is required\";\n//     else if (password !== confirmpassword) newErrors.confirmpassword = \"Passwords do not match\";\n//     return newErrors;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const newErrors = validate();\n//     if (Object.keys(newErrors).length > 0) {\n//       setErrors(newErrors);\n//       return;\n//     }\n\n//     setIsSubmitting(true);\n//     const result = { UserId: username, Name: fullname, Email: email, Password: password, Role: \"user\" };\n\n//     try {\n//       const response = await fetch('http://localhost:3003/usercreate/signup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(result),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         setErrors({ apiError: errorData.message });\n//         setIsSubmitting(false);\n//         return;\n//       }\n\n//       const data = await response.json();\n//       console.log('Success:', data);\n//       navigate('/login'); // Redirect to login page after successful registration\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setErrors({ apiError: 'An error occurred. Please try again later.' });\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navbar />\n//       <div className=\"Register-center\">\n//         <h1>Registration Form</h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"text\" \n//               required \n//               value={fullname} \n//               onChange={(e) => setFullName(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Full Name</label>\n//             {errors.fullname && <span className=\"error\">{errors.fullname}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"text\" \n//               required \n//               value={username} \n//               onChange={(e) => setUserName(e.target.value)} \n//             />\n//             <span></span>\n//             <label>User Name</label>\n//             {errors.username && <span className=\"error\">{errors.username}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"email\" \n//               required \n//               value={email} \n//               onChange={(e) => setEmail(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Email</label>\n//             {errors.email && <span className=\"error\">{errors.email}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"password\" \n//               required \n//               value={password} \n//               onChange={(e) => setPassword(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Password</label>\n//             {errors.password && <span className=\"error\">{errors.password}</span>}\n//           </div>\n//           <div className=\"txt_field\">\n//             <input \n//               type=\"password\" \n//               required \n//               value={confirmpassword} \n//               onChange={(e) => setConfirmPassword(e.target.value)} \n//             />\n//             <span></span>\n//             <label>Confirm Password</label>\n//             {errors.confirmpassword && <h1 className=\"error\">{errors.confirmpassword}</h1>}\n//           </div>\n//           <input type=\"submit\" value=\"Register Now\" disabled={isSubmitting} />\n//           {isSubmitting && <span className=\"loading\">Registred successful</span>}\n//           {errors.apiError && <span className=\"error\">{errors.apiError}</span>}\n//           <Link to=\"/Popup\"></Link>\n//         </form>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default RegistrationForm;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState } from 'react';\nimport './Register.css';\nimport Navbar from '../Components/Navbar';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Modal from '../Components/Modal';\nimport { toast } from 'react-toastify';\n\nfunction RegistrationForm() {\n  const [fullname, setFullName] = useState('');\n  const [username, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmpassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const validate = () => {\n    const newErrors = {};\n    if (!fullname) newErrors.fullname = \"Full Name is required\";\n    if (!username) newErrors.username = \"User Name is required\";\n    if (!email) newErrors.email = \"Email is required\";\n    else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = \"Email is invalid\";\n    if (!password) newErrors.password = \"Password is required\";\n    else if (password.length < 8) newErrors.password = \"Password must be at least 8 characters\";\n    else if (!/[A-Z]/.test(password)) newErrors.password = \"Password must contain at least one uppercase letter\";\n    else if (!/[a-z]/.test(password)) newErrors.password = \"Password must contain at least one lowercase letter\";\n    else if (!/[0-9]/.test(password)) newErrors.password = \"Password must contain at least one number\";\n    if (!confirmpassword) newErrors.confirmpassword = \"Confirm Password is required\";\n    else if (password !== confirmpassword) newErrors.confirmpassword = \"Passwords do not match\";\n    return newErrors;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const newErrors = validate();\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n\n    setIsSubmitting(true);\n    const result = { UserId: username, Name: fullname, Email: email, Password: password, Role: \"user\" };\n\n    try {\n      const response = await fetch('http://localhost:3003/usercreate/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(result),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        setErrors({ apiError: errorData.message });\n        setIsSubmitting(false);\n        return;\n      }\n\n     \n\n      setIsModalOpen(true); // Open the modal on successful registration\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({ apiError: 'An error occurred. Please try again later.' });\n      setIsSubmitting(false);\n    }\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    navigate('/login'); // Redirect to login page after closing the modal\n  };\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"Register-center\">\n        <h1>Registration Form</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"txt_field\">\n            <input \n              type=\"text\" \n              required \n              value={fullname} \n              onChange={(e) => setFullName(e.target.value)} \n            />\n            <span></span>\n            <label>Full Name</label>\n            {errors.fullname && <span className=\"error\">{errors.fullname}</span>}\n          </div>\n          <div className=\"txt_field\">\n            <input \n              type=\"text\" \n              required \n              value={username} \n              onChange={(e) => setUserName(e.target.value)} \n            />\n            <span></span>\n            <label>User Name</label>\n            {errors.username && <span className=\"error\">{errors.username}</span>}\n          </div>\n          <div className=\"txt_field\">\n            <input \n              type=\"email\" \n              required \n              value={email} \n              onChange={(e) => setEmail(e.target.value)} \n            />\n            <span></span>\n            <label>Email</label>\n            {errors.email && <span className=\"error\">{errors.email}</span>}\n          </div>\n          <div className=\"txt_field\">\n            <input \n              type=\"password\" \n              required \n              value={password} \n              onChange={(e) => setPassword(e.target.value)} \n            />\n            <span></span>\n            <label>Password</label>\n            {errors.password && <span className=\"error\">{errors.password}</span>}\n          </div>\n          <div className=\"txt_field\">\n            <input \n              type=\"password\" \n              required \n              value={confirmpassword} \n              onChange={(e) => setConfirmPassword(e.target.value)} \n            />\n            <span></span>\n            <label>Confirm Password</label>\n            {errors.confirmpassword && <h1 className=\"error\">{errors.confirmpassword}</h1>}\n          </div>\n          <input type=\"submit\" value=\"Register Now\" disabled={isSubmitting} />\n          {/* {isSubmitting && <span className=\"loading\">Registering...</span>} */}\n          {errors.apiError && <span className=\"error\">{errors.apiError}</span>}\n          <Link to=\"/Popup\"></Link>\n        </form>\n        <Modal isOpen={isModalOpen} message=\"Registration successful!\" onClose={closeModal} />\n      </div>\n    </>\n  );\n}\n\nexport default RegistrationForm;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAkDA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AACvB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}